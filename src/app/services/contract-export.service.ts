import { Injectable } from '@angular/core';
// Lazy load heavy dependencies

@Injectable({
  providedIn: 'root'
})
export class ContractExportService {

  async exportToDocx(contract: any, templateId: string): Promise<void> {
    try {
      console.log('üîÑ Iniciando exporta√ß√£o DOCX...');
      
      // Carregar m√≥dulo DOCX sem depend√™ncia do Buffer
      const docxModule = await this.loadDocxModuleForBrowser();
      console.log('‚úÖ M√≥dulo DOCX carregado');
      
      // Criar documento DOCX
      const doc = await this.createDocxDocument(contract, templateId, docxModule);
      console.log('‚úÖ Documento DOCX criado');
      
      // Converter para Blob usando API nativa do navegador
      const blob = await this.convertDocxToBlob(doc, docxModule);
      console.log('‚úÖ Blob gerado com sucesso');
      
      // Download do arquivo
      const fileName = this.generateFileName(contract, templateId, 'docx');
      await this.downloadBlob(blob, fileName);
      console.log('‚úÖ Exporta√ß√£o DOCX conclu√≠da');
      
    } catch (error) {
      console.error('‚ùå Erro na exporta√ß√£o DOCX:', error);
      
      // Fallback para PDF se DOCX falhar
      console.log('üîÑ Tentando fallback para PDF...');
      try {
        await this.exportToPdf(contract, templateId);
        this.showUserNotification('N√£o foi poss√≠vel exportar como DOCX. O arquivo foi exportado como PDF.');
      } catch (pdfError) {
        console.error('‚ùå Erro no fallback PDF:', pdfError);
        this.showUserNotification('Erro ao exportar documento. Tente novamente ou atualize a p√°gina.');
        throw new Error('Falha completa na exporta√ß√£o de documentos');
      }
    }
  }

  /**
   * Carrega m√≥dulo DOCX sem depend√™ncias do Node.js/Buffer
   */
  private async loadDocxModuleForBrowser(): Promise<any> {
    try {
      console.log('üîÑ Carregando m√≥dulo DOCX para navegador...');
      
      const module = await import('docx');
      
      // Verificar se os componentes necess√°rios est√£o dispon√≠veis
      const requiredComponents = ['Document', 'Packer', 'Paragraph', 'TextRun', 'HeadingLevel', 'AlignmentType'];
      const missingComponents = requiredComponents.filter(comp => !(module as any)[comp]);
      
      if (missingComponents.length > 0) {
        throw new Error(`Componentes DOCX faltando: ${missingComponents.join(', ')}`);
      }
      
      console.log('‚úÖ M√≥dulo DOCX carregado para navegador');
      return module;
      
    } catch (error) {
      console.error('‚ùå Erro ao carregar m√≥dulo DOCX:', error);
      throw new Error('N√£o foi poss√≠vel carregar a biblioteca de exporta√ß√£o DOCX');
    }
  }

  /**
   * Converte documento DOCX para Blob usando APIs nativas do navegador
   */
  private async convertDocxToBlob(doc: any, docxModule: any): Promise<Blob> {
    try {
      console.log('üîÑ Convertendo documento para Blob...');
      
      // Usar Packer.toBlob que √© uma API nativa do navegador
      const blob = await docxModule.Packer.toBlob(doc);
      
      if (!(blob instanceof Blob)) {
        throw new Error('Falha ao gerar Blob do documento DOCX');
      }
      
      console.log('‚úÖ Convers√£o para Blob bem-sucedida, tamanho:', blob.size, 'bytes');
      return blob;
      
    } catch (error) {
      console.error('‚ùå Erro na convers√£o para Blob:', error);
      
      // Fallback: tentar usar toBase64 e converter para Blob
      try {
        console.log('üîÑ Tentando fallback com base64...');
        const base64String = await docxModule.Packer.toBase64String(doc);
        
        // Converter base64 para Uint8Array
        const binaryString = atob(base64String);
        const bytes = new Uint8Array(binaryString.length);
        
        for (let i = 0; i < binaryString.length; i++) {
          bytes[i] = binaryString.charCodeAt(i);
        }
        
        // Criar Blob a partir do Uint8Array
        const blob = new Blob([bytes], { 
          type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
        });
        
        console.log('‚úÖ Fallback base64 bem-sucedido, tamanho:', blob.size, 'bytes');
        return blob;
        
      } catch (fallbackError) {
        console.error('‚ùå Fallback base64 tamb√©m falhou:', fallbackError);
        throw new Error('N√£o foi poss√≠vel converter documento para formato de download');
      }
    }
  }

  /**
   * Faz download do Blob usando APIs nativas do navegador
   */
  private async downloadBlob(blob: Blob, fileName: string): Promise<void> {
    try {
      console.log('üîÑ Iniciando download:', fileName);
      
      // Primeira tentativa: usar file-saver se dispon√≠vel
      try {
        const fileSaver = await import('file-saver');
        if (fileSaver.saveAs) {
          fileSaver.saveAs(blob, fileName);
          console.log('‚úÖ Download via file-saver');
          return;
        }
      } catch (fileSaverError) {
        console.log('‚ö†Ô∏è file-saver n√£o dispon√≠vel, usando m√©todo nativo');
      }
      
      // Fallback: usar APIs nativas do navegador
      this.downloadBlobNative(blob, fileName);
      console.log('‚úÖ Download via API nativa');
      
    } catch (error) {
      console.error('‚ùå Erro no download:', error);
      throw new Error('N√£o foi poss√≠vel fazer download do arquivo');
    }
  }

  /**
   * Download usando APIs nativas do navegador (sem depend√™ncias externas)
   */
  private downloadBlobNative(blob: Blob, fileName: string): void {
    try {
      // Criar URL do Blob
      const url = URL.createObjectURL(blob);
      
      // Criar elemento de link tempor√°rio
      const link = document.createElement('a');
      link.href = url;
      link.download = fileName;
      link.style.display = 'none';
      
      // Adicionar ao DOM, clicar e remover
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Limpar URL ap√≥s um pequeno delay
      setTimeout(() => {
        URL.revokeObjectURL(url);
      }, 100);
      
    } catch (error) {
      console.error('‚ùå Erro no download nativo:', error);
      
      // √öltimo recurso: abrir em nova aba
      try {
        const url = URL.createObjectURL(blob);
        const newWindow = window.open(url, '_blank');
        if (!newWindow) {
          throw new Error('Popup bloqueado');
        }
        console.log('‚úÖ Arquivo aberto em nova aba');
      } catch (finalError) {
        console.error('‚ùå Todas as tentativas falharam:', finalError);
        throw new Error('N√£o foi poss√≠vel fazer download. Verifique se popups est√£o habilitados.');
      }
    }
  }

  /**
   * Mostra notifica√ß√£o para o usu√°rio
   */
  private showUserNotification(message: string): void {
    // Usar alert simples por enquanto - pode ser substitu√≠do por toast/modal
    alert(message);
  }



  async exportToPdf(contract: any, templateId: string): Promise<void> {
    try {
      console.log('üîÑ Iniciando exporta√ß√£o PDF...');
      
      // Lazy load jsPDF dependency with error handling
      const jsPDFModule = await this.loadJsPDFModule();
      const jsPDF = jsPDFModule.jsPDF;
      
      const content = this.generatePdfContent(contract, templateId);
      const pdf = new jsPDF('p', 'mm', 'a4');
    
      // Configura√ß√µes da p√°gina
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 20;
      const lineHeight = 7;
      let currentY = margin;
    
      // Fun√ß√£o para adicionar texto com quebra de linha
      const addText = (text: string, fontSize: number = 10, isBold: boolean = false) => {
        pdf.setFontSize(fontSize);
        pdf.setFont('helvetica', isBold ? 'bold' : 'normal');
        
        const lines = pdf.splitTextToSize(text, pageWidth - 2 * margin);
        
        for (const line of lines) {
          if (currentY > pageHeight - margin) {
            pdf.addPage();
            currentY = margin;
          }
          
          pdf.text(line, margin, currentY);
          currentY += lineHeight;
        }
        
        currentY += lineHeight * 0.5; // Espa√ßamento extra entre par√°grafos
      };
      
      // Fun√ß√£o para adicionar texto com partes em negrito
      const addTextWithParts = (parts: any[], fontSize: number = 10) => {
        pdf.setFontSize(fontSize);
        
        // Converter as partes em texto simples e usar a fun√ß√£o addText que j√° funciona corretamente
        const fullText = parts.map(part => part.text).join('');
        addText(fullText, fontSize, false);
      };
      
      // Gerar conte√∫do
      for (const section of content) {
        if (section.type === 'title') {
          currentY += lineHeight;
          addText(section.text, 16, true);
          currentY += lineHeight;
        } else if (section.type === 'heading') {
          currentY += lineHeight * 0.5;
          addText(section.text, 12, true);
        } else if (section.type === 'spacing') {
          currentY += lineHeight;
        } else if (section.type === 'signature') {
          addText(section.text, 10, section.bold || false);
        } else if (section.type === 'paragraph' && section.parts) {
          addTextWithParts(section.parts, 10);
        } else {
          addText(section.text, 10, false);
        }
      }
    
      const fileName = this.generateFileName(contract, templateId, 'pdf');
      pdf.save(fileName);
      console.log('‚úÖ Exporta√ß√£o PDF conclu√≠da');
      
    } catch (error) {
      console.error('‚ùå Erro na exporta√ß√£o PDF:', error);
      throw new Error('Erro ao exportar PDF. Tente novamente.');
    }
  }

  private async loadJsPDFModule(): Promise<any> {
    try {
      console.log('üîÑ Carregando m√≥dulo jsPDF...');
      
      const module = await import('jspdf');
      
      if (!module.jsPDF) {
        console.error('‚ùå jsPDF n√£o encontrado no m√≥dulo');
        throw new Error('M√≥dulo jsPDF incompleto');
      }
      
      console.log('‚úÖ M√≥dulo jsPDF carregado com sucesso');
      return module;
      
    } catch (error) {
      console.error('‚ùå Erro ao carregar m√≥dulo jsPDF:', error);
      throw new Error('N√£o foi poss√≠vel carregar o m√≥dulo de exporta√ß√£o PDF');
    }
  }

  private async createDocxDocument(contract: any, templateId: string, docxModule: any): Promise<any> {
    const { Document, Paragraph, TextRun, HeadingLevel, AlignmentType } = docxModule;
    const content = this.generateDocumentContent(contract, templateId);
    
    return new Document({
      sections: [{
        children: content.map(section => {
          if (section.type === 'title') {
            return new Paragraph({
              children: [new TextRun({
                text: section.text,
                bold: true,
                size: 32,
                font: 'Arial'
              })],
              heading: HeadingLevel.TITLE,
              alignment: AlignmentType.CENTER,
              spacing: { after: 400 }
            });
          } else if (section.type === 'heading') {
            return new Paragraph({
              children: [new TextRun({
                text: section.text,
                bold: true,
                size: 24,
                font: 'Arial'
              })],
              heading: HeadingLevel.HEADING_1,
              spacing: { before: 300, after: 200 }
            });
          } else if (section.type === 'spacing') {
            return new Paragraph({
              children: [new TextRun({ text: '', size: 20 })],
              spacing: { after: 240 }
            });
          } else if (section.type === 'signature') {
            return new Paragraph({
              children: [new TextRun({
                text: section.text,
                size: 20,
                bold: section.bold || false,
                font: 'Arial'
              })],
              alignment: AlignmentType.CENTER,
              spacing: { after: 120 }
            });
          } else if (section.type === 'paragraph-bold') {
            return new Paragraph({
              children: [new TextRun({
                text: section.text,
                size: 20,
                bold: true,
                font: 'Arial'
              })],
              alignment: AlignmentType.JUSTIFIED,
              spacing: { after: 120 }
            });
          } else {
            // Para par√°grafos normais, verificar se h√° partes em negrito
            if (section.parts) {
              return new Paragraph({
                children: section.parts.map((part: any) => new TextRun({
                  text: part.text,
                  size: 20,
                  bold: part.bold || false,
                  italic: part.italic || false,
                  underline: part.underline ? {} : undefined,
                  font: 'Arial'
                })),
                alignment: AlignmentType.JUSTIFIED,
                spacing: { after: 120 }
              });
            } else {
              return new Paragraph({
                children: [new TextRun({
                  text: section.text,
                  size: 20,
                  font: 'Arial'
                })],
                alignment: AlignmentType.JUSTIFIED,
                spacing: { after: 120 }
              });
            }
          }
        })
      }]
    });
  }

  private generateDocumentContent(contract: any, templateId: string): any[] {
    // Usar m√©todos auxiliares para extrair dados do cliente
    const clientName = this.getClientName(contract.client);
    const clientDocument = this.getClientDocument(contract.client);
    const clientAddress = this.getClientAddress(contract.client);
    const clientEmail = this.getClientEmail(contract.client);
    const clientRepresentative = this.getClientRepresentative(contract.client);

    const contractNumber = contract.contract_number || '[NUMERO_CONTRATO]';
    const totalValue = this.formatCurrency(contract.total_value || 0);
    const startDate = this.formatDate(contract.start_date);
    const endDate = this.formatDate(contract.end_date);

    // Formatar servi√ßos com descri√ß√µes, excluindo os internos
    const services = this.formatServicesWithDescriptions(contract.contract_services);
    
    // Verificar forma de pagamento e formatar adequadamente
    let paymentText = '';
    if (this.hasBarterPayment(contract)) {
      // Se tem permuta, usar formata√ß√£o especial
      paymentText = this.formatBarterInfo(contract);
    } else {
      // Forma de pagamento tradicional
      const isInstallment = this.isContractInstallment(contract);
      paymentText = isInstallment ? this.formatInstallments(contract) : '';
    }
    
    // Log para debug
    console.log('üìä Dados do contrato:', {
      clientName,
      clientDocument,
      contractNumber,
      totalValue,
      startDate,
      endDate,
      services,
      paymentMethod: contract.payment_method,
      hasBarterPayment: this.hasBarterPayment(contract),
      barterInfo: this.hasBarterPayment(contract) ? {
        type: contract.barter_type,
        value: contract.barter_value,
        percentage: contract.barter_percentage,
        secondaryMethod: contract.secondary_payment_method
      } : null
    });
    
    switch (templateId) {
      case 'consultoria-pj':
        return this.getConsultoriaPJContent(clientName, clientDocument, contractNumber, totalValue, startDate, endDate, services, paymentText, clientAddress, clientEmail, clientRepresentative, contract.contract_services);
      case 'consultoria-pf':
        return this.getConsultoriaPFContent(clientName, clientDocument, contractNumber, totalValue, startDate, endDate, services, paymentText);
      case 'recrutamento':
        return this.getRecrutamentoContent(clientName, clientDocument, contractNumber, totalValue, startDate, endDate, services, paymentText);
      default:
        return [];
    }
  }

  private generatePdfContent(contract: any, templateId: string): any[] {
    return this.generateDocumentContent(contract, templateId);
  }

  private getConsultoriaPJContent(clientName: string, clientDocument: string, contractNumber: string, totalValue: string, startDate: string, endDate: string, services: string, paymentText: string, clientAddress: string, clientEmail: string, clientRepresentative: string, contractServices?: any[]): any[] {
  return [
    {
      type: 'title',
      text: 'CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS DE CONSULTORIA CORPORATIVA'
    },
    {
      type: 'paragraph',
      text: `Pelo presente contrato particular de presta√ß√£o de servi√ßos de Consultoria Corporativa ("Contrato"), as partes:`
    },
    {
      type: 'paragraph',
      parts: [
        { text: '1. ', bold: false },
        { text: clientName.toUpperCase(), bold: true },
        { text: `, ${this.getClientType(clientDocument)}, inscrita no ${this.getDocumentType(clientDocument)} sob o n¬∫ ${clientDocument}, com sede a ${clientAddress}, cujo endere√ßo eletr√¥nico √© ${clientEmail}, neste ato representado por ${clientRepresentative}, na forma de seu Contrato Social, doravante designada simplesmente como `, bold: false },
        { text: 'CONTRATANTE', bold: true },
        { text: '; e', bold: false }
      ]
    },
    {
      type: 'paragraph',
      parts: [
        { text: '2. ', bold: false },
        { text: 'NAUE CONSULTORIA LTDA.', bold: true },
        { text: ', sociedade empres√°ria limitada, inscrita no CNPJ sob o n. 46.259.049/0001-64, com sede a Avenida Dep. Jamel Cec√≠lio e Rua 14 e Rua 14-A, quadra c-9, lote 02/05-15, Ed. Flamboyant Park Business, sala 409, Jardim Goi√°s, Goi√¢nia-GO, cujo endere√ßo eletr√¥nico √© mariana@naueconsultoria.com.br, neste ato representado por sua s√≥cia administradora Francisca Mariana Ferreira de Sousa Naue Lopes, na forma de seu Contrato Social, doravante designada simplesmente como ', bold: false },
        { text: 'CONTRATADA', bold: true },
        { text: '.', bold: false }
      ]
    },
    {
      type: 'paragraph',
      text: 'A CONTRATANTE e a CONTRATADA ser√£o conjuntamente designados como "PARTES" e individualmente como "PARTE".'
    },
    {
      type: 'paragraph',
      text: 'ASSIM, as Partes resolvem, de comum acordo, celebrar o presente Contrato, de acordo com as condi√ß√µes abaixo descritas:'
    },

    // CL√ÅUSULA 1 - OBJETO
    {
      type: 'heading',
      text: '1. OBJETO'
    },
    {
      type: 'paragraph',
      text: '1.1. As partes acima identificadas t√™m, entre si, justo e acertado o presente Contrato de Presta√ß√£o de Servi√ßos em Consultoria Corporativa, considerando as disposi√ß√µes do C√≥digo Civil Brasileiro, que se reger√° com fundamento nos artigos 421, 422, 425, 594 e 598 do C√≥digo Civil Brasileiro, bem como no princ√≠pio do pacta sunt servanda e na Lei 13.429/17 (Lei da Terceiriza√ß√£o), pelas cl√°usulas, condi√ß√µes de pre√ßo, forma e termo de pagamento descritas no presente contrato.'
    },
    {
      type: 'paragraph',
      text: '1.2. O objeto do presente contrato e demais servi√ßos ser√£o prestados sem exclusividade pela Contratada;'
    },
    {
      type: 'paragraph',
      text: '1.3. Todos os servi√ßos elencados no presente Contrato ser√£o executados por pessoal devidamente habilitado pela CONTRATADA, a quem compete com exclusividade o pagamento pelos trabalhos realizados, a fiscaliza√ß√£o e o cumprimento do ora pactuado, bem como todas as demais obriga√ß√µes legais, ficando desta forma, expressamente exclu√≠da a responsabilidade da CONTRATANTE sobre qualquer mat√©ria trabalhista e/ou tribut√°ria disposta neste Contrato.'
    },
    {
      type: 'paragraph',
      text: '1.4. Inexistir√° qualquer v√≠nculo empregat√≠cio entre a CONTRATADA e a CONTRATANTE, sem preju√≠zo da obriga√ß√£o da CONTRATADA de respeitar as pol√≠ticas internas da Contratante e demais obriga√ß√µes e limita√ß√µes previstas no presente Contrato e na legisla√ß√£o vigente.'
    },

    // CL√ÅUSULA 2 - LOCAL DA PRESTA√á√ÉO DE SERVI√áO
    {
      type: 'heading',
      text: '2. LOCAL DA PRESTA√á√ÉO DE SERVI√áO'
    },
    {
      type: 'paragraph',
      text: '2.1. O objeto deste Contrato ser√° prestado na sede da empresa da CONTRATANTE, que arcar√° com todas as despesas relacionadas com a execu√ß√£o dos servi√ßos ora contratados, podendo ser realizado na sede da Contratada, de forma remota/online ou em local diverso acordado previamente entre as partes.'
    },

    // CL√ÅUSULA 3 - DO ESCOPO DA PRESTA√á√ÉO DE SERVI√áOS
    {
      type: 'heading',
      text: '3. DO ESCOPO DA PRESTA√á√ÉO DE SERVI√áOS'
    },
    {
      type: 'paragraph',
      text: `3.1. O escopo de entregas previstas neste contrato inclui:`
    },
    // Adicionar servi√ßos detalhados
    ...(contractServices ? this.formatServicesDetailed(contractServices) : [{ type: 'paragraph', text: `Os servi√ßos contratados s√£o: ${services}` }]),

    // CL√ÅUSULA 4 - DAS OBRIGA√á√ïES DA CONTRATANTE
    {
      type: 'heading',
      text: '4. DAS OBRIGA√á√ïES DA CONTRATANTE'
    },
    {
      type: 'paragraph',
      text: '4.1. Realizar o pagamento, conforme disposto na cl√°usula 6 deste contrato;'
    },
    {
      type: 'paragraph',
      text: '4.2. √â dever da CONTRATANTE zelar para que a CONTRATADA tenha √† sua disposi√ß√£o todas as informa√ß√µes necess√°rias para as elabora√ß√µes dos materiais, inclusive documenta√ß√µes financeiras, fiscais e/ou de colaboradores, que ser√£o utilizados para constru√ß√£o dos materiais necess√°rios;'
    },
    {
      type: 'paragraph',
      text: '4.3. Fica vedado √† CONTRATANTE negociar abatimentos, descontos ou dila√ß√µes de prazo para o pagamento ou execu√ß√£o dos servi√ßos, sem o pr√©vio conhecimento e autoriza√ß√£o da contratada;'
    },
    {
      type: 'paragraph',
      text: '4.4. Tratar o profissional com respeito, discri√ß√£o, profissionalismo, lhe dando todo o suporte e liberdade dispostos nesse instrumento contratual;'
    },
    {
      type: 'paragraph',
      text: '4.5. √â dever da CONTRATANTE informar previamente √† CONTRATADA sobre toda e qualquer anormalidade que possa influir nos resultados do projeto;'
    },
    {
      type: 'paragraph',
      text: '4.6. Caso a CONTRATANTE, a seu exclusivo crit√©rio, contrate os servi√ßos de softwares de terceiros para sua plataforma, que n√£o fa√ßam parte do escopo da presta√ß√£o de servi√ßos DA CONTRATADA, esta n√£o assumir√° qualquer responsabilidade pelos servi√ßos executados, bem como pelo bom funcionamento do software, n√£o se responsabilizando pelo pagamento de despesas operacionais, contrata√ß√£o de software de terceiros, traslados ou eventuais despesas com produ√ß√£o de material e veicula√ß√£o de m√≠dia, as quais s√£o encargos da CONTRATANTE.'
    },

    // CL√ÅUSULA 5 - DAS OBRIGA√á√ïES DA CONTRATADA
    {
      type: 'heading',
      text: '5. DAS OBRIGA√á√ïES DA CONTRATADA'
    },
    {
      type: 'paragraph',
      text: '5.1. Cumprir integralmente o disposto neste contrato;'
    },
    {
      type: 'paragraph',
      text: '5.2. Fornecer √† CONTRATANTE informa√ß√µes sobre as especificidades dos servi√ßos necess√°rios ao bom andamento das atividades desenvolvidas pela CONTRATANTE;'
    },
    {
      type: 'paragraph',
      text: '5.3. Prestar contas, quando julgar necess√°rio, √† CONTRATANTE sobre suas atividades realizadas ou quando for solicitado pela CONTRATADA;'
    },
    {
      type: 'paragraph',
      text: '5.4. Compromete-se, outrossim, a CONTRATADA, ao exercer suas atividades profissionais, execut√°-las com zelo, cordialidade, simpatia, profissionalismo e da melhor maneira poss√≠vel, a fim de que n√£o seja denegrido o bom nome do estabelecimento.'
    },
    {
      type: 'paragraph',
      text: '5.5. Dever√° a CONTRATADA no conv√≠vio com os demais profissionais do estabelecimento, comportar-se de forma respeitosa (moral, social e profissional), n√£o dando margem a reclama√ß√µes, bem como se responsabilizando por seus auxiliares particulares, isto √©, contratados por ela e que n√£o fazem parte do corpo de funcion√°rios da CONTRATANTE.'
    },
    {
      type: 'paragraph',
      text: '5.6. Prestar os servi√ßos levando em considera√ß√£o os crit√©rios t√©cnicos necess√°rios para cada uma das atividades do escopo estabelecido como objeto do contrato, sob pena de ser responsabilizada por qualquer a√ß√£o ou omiss√£o que represente ato il√≠cito, nos termos da lei vigente.'
    },

    // CL√ÅUSULA 6 - DOS HONOR√ÅRIOS
    {
      type: 'heading',
      text: '6. DOS HONOR√ÅRIOS'
    },
    {
      type: 'paragraph',
      text: `6.1. Pelo efetivo desempenho das atividades dispostas neste contrato, a CONTRATADA receber√° o valor total de ${totalValue}.`
    },
    {
      type: 'paragraph',
      text: `6.2. ${paymentText}`
    },
    {
      type: 'paragraph',
      text: '6.3. Correm por conta da CONTRATADA a responsabilidade pelos encargos tribut√°rios e previdenci√°rios sobre os seus honor√°rios, vez que n√£o autoriza o desconto dos tributos pela CONTRATANTE.'
    },
    {
      type: 'paragraph',
      text: '6.4. As notas fiscais ser√£o emitidas no prazo m√≠nimo de 15 dias anteriores ao vencimento das parcelas.'
    },
    {
      type: 'paragraph',
      text: '6.5. A CONTRATADA poder√°, a seu exclusivo crit√©rio e sem preju√≠zo √† CONTRATANTE, direcionar a emiss√£o das Notas Fiscais referentes aos servi√ßos prestados em nome de terceiros, utilizando CNPJ distinto daquele pertencente √† CONTRATADA, ainda que o referido CNPJ n√£o fa√ßa parte do mesmo grupo econ√¥mico. A emiss√£o da Nota Fiscal por terceiros n√£o implicar√° em altera√ß√£o das responsabilidades da CONTRATADA perante a CONTRATANTE, que se manter√£o inalteradas nos termos deste contrato. A CONTRATADA se compromete a garantir que todos os tributos e demais obriga√ß√µes fiscais decorrentes da emiss√£o sejam devidamente cumpridas conforme a legisla√ß√£o aplic√°vel.'
    },
    {
      type: 'paragraph',
      text: '6.6. No valor acima previsto est√£o inclusos todos os custos diretos da CONTRATADA (m√£o de obra, instala√ß√£o/configura√ß√£o, administra√ß√£o, encargos sociais, trabalhistas e tribut√°rios etc.), n√£o sendo admitida, a qualquer t√≠tulo, a cobran√ßa de valores adicionais.'
    },
    {
      type: 'paragraph',
      text: '6.7. Os custos indiretos cuja titular seja a parte CONTRATANTE (taxas, seguros, tributos, despesas cartor√°rias e emolumentos etc.), bem como qualquer insumo que possa influir sobre a execu√ß√£o das atividades descritas na cl√°usula 3¬™ n√£o est√£o inclusos no valor acima descrito, podendo haver cobran√ßas adicionais, desde que previamente avaliado pelas Partes.'
    },
    {
      type: 'paragraph',
      text: '6.8. Todas as despesas em viagens fora da regi√£o metropolitana de Goi√¢nia-GO (raio de 25 km) necess√°rias para a execu√ß√£o dos servi√ßos dos trabalhos, incluindo, mas n√£o se limitando a transporte a√©reo, transporte terrestre, hospedagem em hotel igual ou acima a 3 estrelas em quarto single, alimenta√ß√£o, dever√£o ser aprovadas pela CONTRATANTE previamente e ser√£o cobertas por ela.'
    },

    // CL√ÅUSULA 7 - DA MORA
    {
      type: 'heading',
      text: '7. DA MORA'
    },
    {
      type: 'paragraph',
      text: '7.1. A mora da CONTRATANTE no descumprimento de qualquer uma das parcelas assumidas neste Contrato, desde que referido descumprimento n√£o seja sanado no prazo de 3 (tr√™s) dias contados do envio de notifica√ß√£o pela CONTRATADA nesse sentido, acarretar√° as seguintes penalidades:'
    },
    {
      type: 'paragraph',
      text: '7.2. Corre√ß√£o monet√°ria, de acordo com os crit√©rios de atualiza√ß√£o monet√°ria previstos neste Contrato e calculada pro rata die;'
    },
    {
      type: 'paragraph',
      text: '7.3. Juros de mora de 1% (um por cento) ao m√™s, ou fra√ß√£o, calculados pro rata die, que incidir√£o sobre o valor do principal;'
    },
    {
      type: 'paragraph',
      text: '7.4. Multa morat√≥ria de 2% (dois por cento) sobre o valor da presta√ß√£o;'
    },
    {
      type: 'paragraph',
      text: '7.5. Honor√°rios na base de 10% (dez por cento) sobre o valor do d√©bito atualizado, e despesas extrajudiciais, se necess√°ria a interven√ß√£o de terceirizada de cobran√ßa extrajudicial, sendo que em sede de cobran√ßa via judicial, incidir√£o honor√°rios advocat√≠cios no importe de 20% (vinte por cento) sobre o valor do d√©bito atualizado, acrescidos das custas judiciais.'
    },
    {
      type: 'paragraph',
      text: '7.6. Outras despesas incidentes sobre o d√©bito e decorrentes de poss√≠veis cobran√ßas (notifica√ß√µes, publica√ß√£o em edital, entre outras).'
    },
    {
      type: 'paragraph',
      text: '7.7. Caso alguma parcela n√£o seja quitada em at√© 30 (trinta) dias ap√≥s o seu vencimento, a CONTRATADA ter√° o direito de encaminh√°-lo para protesto, bem como inserir o(s) nome(s) do(s) CONTRATANTE(s) no cadastro dos √ìrg√£os de Prote√ß√£o ao Consumidor SPC e SERASA.'
    },

    // CL√ÅUSULA 8 - DO PRAZO E DA RESCIS√ÉO
    {
      type: 'heading',
      text: '8. DO PRAZO E DA RESCIS√ÉO'
    },
    {
      type: 'paragraph',
      text: `8.1. O presente contrato vigorar√° de ${startDate} at√© ${endDate}, podendo, no entanto, ser rescindido antecipadamente por qualquer das Partes, mediante envio de notifica√ß√£o a outra Parte com 30 (trinta) dias de anteced√™ncia.`
    },
    {
      type: 'paragraph',
      text: '8.2. O presente Contrato poder√° ser rescindido antecipadamente com efeito imediato, sem √¥nus ou penalidades √†s Partes, nos seguintes casos:'
    },
    {
      type: 'paragraph',
      text: 'a) Por m√∫tuo acordo entre as Partes;'
    },
    {
      type: 'paragraph',
      text: 'b) Ocorrer homologa√ß√£o ou decreta√ß√£o de fal√™ncia, insolv√™ncia, liquida√ß√£o judicial ou extrajudicial ou ocorrer pedido de recupera√ß√£o judicial ou extrajudicial de qualquer das Partes;'
    },
    {
      type: 'paragraph',
      text: 'c) Unilateralmente, por qualquer das Partes, em caso de descumprimento pela outra Parte das obriga√ß√µes impostas por este Contrato, ou dos seus deveres fiduci√°rios previstos em lei, desde que referido descumprimento n√£o seja sanado no prazo de 3 (tr√™s) dias contados do envio de notifica√ß√£o pela outra Parte nesse sentido; e'
    },
    {
      type: 'paragraph',
      text: 'd) Unilateralmente, por qualquer das Partes, caso n√£o haja interesse na continuidade da rela√ß√£o contratual, observando o aviso pr√©vio de 30 (trinta) dias.'
    },
    {
      type: 'paragraph',
      text: '8.3. Na hip√≥tese de rescis√£o antecipada, as Partes realizar√£o encontro de contas entre a parcela do pre√ßo j√° paga pela CONTRATANTE e a parte dos servi√ßos efetivamente prestados pela CONTRATADA, sendo assegurado √† CONTRATADA o recebimento proporcional aos servi√ßos executados, com devolu√ß√£o pela CONTRATADA de eventual valor recebido em excesso.'
    },
    {
      type: 'paragraph',
      text: '8.4. Em caso de rescis√£o antecipada imotivada por iniciativa da CONTRATANTE, sem a observ√¢ncia do disposto no item 8.2, al√≠nea "d", esta ficar√° sujeita, al√©m das disposi√ß√µes do item 8.3, ao pagamento de multa compensat√≥ria correspondente a 10% (dez por cento) do valor remanescente do contrato √† √©poca da rescis√£o.'
    },

    // CL√ÅUSULA 9 - DO SIGILO
    {
      type: 'heading',
      text: '9. DO SIGILO'
    },
    {
      type: 'paragraph',
      text: '9.1. As Partes se obrigam a manter o mais completo e absoluto sigilo sobre toda "Informa√ß√£o Confidencial", que para os fins do presente Contrato significa quaisquer dados de clientes, colaboradores, materiais ou conte√∫dos eletr√¥nicos ou f√≠sicos, artigos, estrat√©gias, pormenores, informa√ß√µes escritas ou verbais, documentos, especifica√ß√µes t√©cnicas ou comerciais, listas de clientes, material publicit√°rio, planos e projetos destinados aos clientes, inova√ß√µes e aperfei√ßoamentos da outra Parte, ou qualquer informa√ß√£o n√£o dispon√≠vel ao p√∫blico ou que n√£o tenha sido permitida sua divulga√ß√£o, que venha a ter conhecimento ou acesso, em raz√£o desta rela√ß√£o contratual, sejam eles de interesse da Parte violada ou de terceiros, bem como qualquer outro material ou documento, que a CONTRATANTE, seus acionistas, controladoras ou sociedades sob controle comum, bem como clientes presentes e passados identifiquem ou tratem como sendo confidencial, n√£o podendo, sob qualquer pretexto, divulgar, revelar, reproduzir, utilizar ou deles dar conhecimento a terceiros, estranhos ao presente Contrato.'
    },
    {
      type: 'paragraph',
      text: '9.2. A CONTRATADA obriga-se a n√£o transmitir, direta ou indiretamente, a quem quer que seja, na vig√™ncia do contrato ou, posteriormente a ele, quaisquer informa√ß√µes confidenciais, mantendo sigilo absoluto quanto a tais conhecimentos, por qualquer meio e a qualquer tempo, sob pena de responsabiliza√ß√£o civil e penal. Frise-se que esse compromisso assumido pela CONTRATADA se estende a seus prepostos, empregados, subcontratados ou a qualquer indiv√≠duo que lhe preste servi√ßos e tenha acesso, por qualquer meio, √†s Informa√ß√µes Confidenciais.'
    },
    {
      type: 'paragraph',
      text: '9.3. A CONTRATADA se obriga a utilizar a Informa√ß√£o Confidencial √∫nica e exclusivamente no interesse da CONTRATANTE, visando a cumprir com seus deveres e fun√ß√µes nos termos deste Contrato.'
    },
    {
      type: 'paragraph',
      text: '9.4. A CONTRATADA concorda que toda e qualquer documenta√ß√£o compilada durante o curso deste Contrato, seja por escrito ou em meios eletr√¥nicos, dever√° ser entregue √† CONTRATANTE ao final do presente Contrato ou mediante solicita√ß√£o da CONTRATANTE.'
    },
    {
      type: 'paragraph',
      text: '9.5. As obriga√ß√µes de sigilo e confidencialidade previstas nesta Cl√°usula persistir√£o mesmo ap√≥s a cessa√ß√£o do presente Contrato (seja qual for a causa ou forma de cessa√ß√£o) e enquanto tal informa√ß√£o n√£o for do conhecimento p√∫blico.'
    },

    // CL√ÅUSULA 10 - CONDI√á√ïES GERAIS
    {
      type: 'heading',
      text: '10. CONDI√á√ïES GERAIS'
    },
    {
      type: 'paragraph',
      text: '10.1. Legisla√ß√£o Aplic√°vel: O presente Contrato ser√° regido e interpretado de acordo com as leis da Rep√∫blica Federativa do Brasil.'
    },
    {
      type: 'paragraph',
      text: '10.2. Acordo entre as partes: O presente Contrato representa a integralidade das disposi√ß√µes contratadas entre as Partes, e substitui todos os acordos anteriores, quer expressos ou t√°citos, bem como qualquer minuta ou acordo verbal anterior entre as Partes, sendo que qualquer acerto n√£o previsto neste Contrato n√£o tem validade por ele presumida.'
    },
    {
      type: 'paragraph',
      text: '10.3. Invalidade Parcial: Se qualquer das cl√°usulas deste Contrato for considerada nula ou ineficaz, tal decis√£o n√£o afetar√° a validade e efic√°cia das demais cl√°usulas, que subsistir√£o e ser√£o consideradas plenamente v√°lidas e eficazes como se a cl√°usula nula ou ineficaz tivesse sido eliminada.'
    },
    {
      type: 'paragraph',
      text: '10.4. Sucessores: O presente Contrato vincula e obriga as Partes e seus respectivos sucessores a qualquer t√≠tulo.'
    },
    {
      type: 'paragraph',
      text: '10.5. Altera√ß√£o: Este Contrato s√≥ poder√° ser modificado, nem haver√° ren√∫ncia de suas disposi√ß√µes, exceto por meio de aditamento e consentimento, por escrito, de todas as Partes signat√°rias, observando o disposto na legisla√ß√£o aplic√°vel.'
    },
    {
      type: 'paragraph',
      text: '10.6. Proporcionalidade: As obriga√ß√µes assumidas pelas Partes s√£o reconhecidas por todas como manifestamente proporcionais, estando cientes de todas as circunst√¢ncias e regras que norteiam os presentes neg√≥cios jur√≠dicos, n√£o se verificando neste ajuste qualquer fato ou obriga√ß√£o que possa vir a ser caracterizado como les√£o, para efeitos do Artigo 157 do C√≥digo Civil Brasileiro.'
    },
    {
      type: 'paragraph',
      text: '10.7. Toler√¢ncia ou Nova√ß√£o: Caso qualquer das Partes deixe de exigir o cumprimento pontual ou integral das obriga√ß√µes decorrentes deste Contrato, ou deixe de exercer qualquer direito ou faculdade que lhe seja atribu√≠do, tal fato ser√° interpretado como mera toler√¢ncia, a t√≠tulo de liberalidade e n√£o importar√° em ren√∫ncia aos direitos e faculdades n√£o exercidos, nem em precedente, nova√ß√£o ou revoga√ß√£o de qualquer premissa ou condi√ß√£o do presente Contrato.'
    },
    {
      type: 'paragraph',
      text: '10.8. Compliance: As Partes se comprometem a praticarem, celebrarem ou formalizarem todos e quaisquer atos, a√ß√µes e/ou documentos necess√°rios ou adicionais ao presente Contrato, com o intuito de melhor evidenciar, aperfei√ßoar ou executar qualquer dos termos e disposi√ß√£o ora aven√ßadas, se comprometendo a observarem as boas pr√°ticas e de integridade (Compliance), zelando pelo pleno atendimento √†s normas legais.'
    },
    {
      type: 'paragraph',
      text: '10.9. Exequibilidade: Todas as obriga√ß√µes previstas neste Contrato s√£o pass√≠veis de execu√ß√£o espec√≠fica, nos termos da legisla√ß√£o processual em vigor, servindo este Contrato como t√≠tulo executivo extrajudicial, nos termos do Artigo 784, inciso III, do C√≥digo de Processo Civil.'
    },
    {
      type: 'paragraph',
      text: '10.10. Anticorrup√ß√£o: As Partes declaram conhecer as normas de preven√ß√£o √† corrup√ß√£o previstas na legisla√ß√£o brasileira, dentre elas o C√≥digo Penal Brasileiro, a Lei de Improbidade Administrativa (Lei n¬∫ 8.429/1992) e a Lei n¬∫ 12.846/2013 (em conjunto, "Leis Anticorrup√ß√£o") e, se comprometem a cumpri-las fielmente, por si e por seus representantes, administradores, diretores, conselheiros, s√≥cios ou acionistas, assessores, consultores, empregados e quaisquer outros que estejam vinculados direta ou indiretamente ao presente Contrato, bem como exigir o seu cumprimento pelos terceiros por ela contratados.'
    },
    {
      type: 'paragraph',
      text: '10.11. Notifica√ß√µes: Todas as notifica√ß√µes e comunica√ß√µes relacionadas a este Contrato dever√£o ser encaminhadas por escrito, via e-mail com comprova√ß√£o de envio e recebimento, dirigidos e/ou entregues √†s Partes signat√°rias nos endere√ßos indicados na qualifica√ß√£o das Partes acima, as quais obrigam-se, desde j√°, a informarem por escrito, quaisquer altera√ß√µes.'
    },
    {
      type: 'paragraph',
      text: '10.12. Assinatura Eletr√¥nica: As Partes afirmam e declaram que o presente Contrato, bem como √†queles instrumentos a ele coligados, poder√£o ser assinados por meio eletr√¥nico, sendo consideradas v√°lidas as referidas assinaturas, reconhecendo como v√°lidas as assinaturas enviadas para o(s) endere√ßo(s) eletr√¥nico(s) previstos neste Contrato, inclusive √†queles do(s) seu(s) representante(s) aqui qualificados, nos termos do art. 10, par√°grafo 2¬∫, da MP2200-2/2001.'
    },
    {
      type: 'paragraph',
      text: '10.13. Hierarquia e Subordina√ß√£o: N√£o haver√° hierarquia nem subordina√ß√£o entre Contratante e Contratada, devendo tratar-se com considera√ß√£o e respeito rec√≠procos, observando sempre o regimento Interno.'
    },
    {
      type: 'paragraph',
      text: '10.14. Rela√ß√£o Empregat√≠cia: Tal contrato n√£o possui cond√£o de rela√ß√£o empregat√≠cia, n√£o incorrendo em habitualidade, subordina√ß√£o e onerosidade, excluindo-se de qualquer fundamenta√ß√£o da Consolida√ß√£o das Leis Trabalhistas, uma vez que se trata de Presta√ß√£o de Servi√ßo Terceirizado conforme preceitua a Lei 13.429/17 (Lei da Terceiriza√ß√£o).'
    },
    {
      type: 'paragraph',
      text: '10.15. Relacionamento entre as partes: Aplicam-se ao relacionamento entre Contratada e Contratante, al√©m das normas dispostas pelo c√≥digo civil, tamb√©m o c√≥digo de defesa do consumidor, no que couber a Lei das terceiriza√ß√µes n¬∫ 13429/2017, as normas √©ticas do respectivo conselho profissional.'
    },
    {
      type: 'paragraph',
      text: '10.16. Rescis√£o: A rescis√£o do presente Contrato, n√£o extingue os direitos e obriga√ß√µes que as Partes tenham entre si e para com terceiros.'
    },
    {
      type: 'paragraph',
      text: '10.17. Infra√ß√£o: Eventual infra√ß√£o a qualquer das cl√°usulas aqui estabelecidas ensejar√° a Parte inocente a promover as medidas judiciais cab√≠veis.'
    },

    // CL√ÅUSULA 11 - DO FORO
    {
      type: 'heading',
      text: '11. DO FORO'
    },
    {
      type: 'paragraph',
      text: 'As Partes elegem irrevogavelmente o Foro da Cidade de Goi√¢nia, Estado de Goi√°s, para dirimir quaisquer d√∫vidas oriundas do presente Contrato, com ren√∫ncia a qualquer outro, por mais privilegiado que seja.'
    },
    {
      type: 'paragraph',
      text: 'E, POR ESTAREM ASSIM JUSTAS E CONTRATADAS, as Partes assinam o presente Contrato em via √∫nica, em formato digital, por meio dos seus representantes legais devidamente autorizados, juntamente com 2 (duas) testemunhas.'
    },
    {
      type: 'paragraph',
      text: 'O Contrato passa a ter validade a partir da assinatura por ambos.'
    },
    {
      type: 'paragraph',
      text: `N√∫mero do contrato: ${contractNumber}`
    },
    {
      type: 'paragraph',
      text: `Goi√¢nia-GO, ${this.getCurrentDate()}`
    },

    // Espa√ßamento para assinaturas
    {
      type: 'spacing',
      text: ''
    },
    {
      type: 'spacing',
      text: ''
    },
    {
      type: 'spacing',
      text: ''
    },

    // Assinatura NAUE
    {
      type: 'signature',
      text: '___________________________________________________'
    },
    {
      type: 'signature',
      text: 'NAUE CONSULTORIA LTDA.',
      bold: true
    },
    {
      type: 'signature',
      text: 'Fundadora Administradora'
    },
    {
      type: 'signature',
      text: 'Francisca Mariana Ferreira de Sousa Naue Lopes'
    },

    {
      type: 'spacing',
      text: ''
    },
    {
      type: 'spacing',
      text: ''
    },

    // Assinatura CONTRATANTE
    {
      type: 'signature',
      text: '___________________________________________________'
    },
    {
      type: 'signature',
      text: clientName.toUpperCase(),
      bold: true
    },
    {
      type: 'signature',
      text: 'S√≥cio(a) Administrador(a)'
    },
    {
      type: 'signature',
      text: clientRepresentative
    },

    {
      type: 'spacing',
      text: ''
    },
    {
      type: 'spacing',
      text: ''
    },

    // Testemunhas
    {
      type: 'heading',
      text: 'Testemunhas:'
    },
    {
      type: 'spacing',
      text: ''
    },
    {
      type: 'signature',
      text: 'Testemunha 1: ________________________    Testemunha 2: ________________________'
    }
  ];
}

  private getConsultoriaPFContent(clientName: string, clientDocument: string, contractNumber: string, totalValue: string, startDate: string, endDate: string, services: string, paymentText: string): any[] {
    return [
      {
        type: 'title',
        text: 'CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS DE CONSULTORIA CORPORATIVA'
      },
      {
        type: 'paragraph',
        text: `Pelo presente contrato particular de presta√ß√£o de servi√ßos de Consultoria Corporativa ("Contrato"), as partes:`
      },
      {
        type: 'paragraph',
        parts: [
          { text: '1. ', bold: false },
          { text: clientName.toUpperCase(), bold: true },
          { text: `, inscrito no CPF sob o n¬∫ ${clientDocument}, doravante designado simplesmente como `, bold: false },
          { text: 'CONTRATANTE', bold: true },
          { text: '; e', bold: false }
        ]
      },
      {
        type: 'paragraph',
        parts: [
          { text: '2. ', bold: false },
          { text: 'NAUE CONSULTORIA LTDA.', bold: true },
          { text: ', sociedade empres√°ria limitada, inscrita no CNPJ sob o n. 46.259.049/0001-64, com sede a Avenida Dep. Jamel Cec√≠lio e Rua 14 e Rua 14-A, quadra c-9, lote 02/05-15, Ed. Flamboyant Park Business, sala 409, Jardim Goi√°s, Goi√¢nia-GO, cujo endere√ßo eletr√¥nico √© mariana@naueconsultoria.com.br, neste ato representado por sua s√≥cia administradora Francisca Mariana Ferreira de Sousa Naue Lopes, na forma de seu Contrato Social, doravante designada simplesmente como ', bold: false },
          { text: 'CONTRATADA', bold: true },
          { text: '.', bold: false }
        ]
      },
      {
        type: 'paragraph',
        text: 'A CONTRATANTE e a CONTRATADA ser√£o conjuntamente designados como "PARTES" e individualmente como "PARTE".'
      },
      {
        type: 'paragraph',
        text: 'ASSIM, as Partes resolvem, de comum acordo, celebrar o presente Contrato, de acordo com as condi√ß√µes abaixo descritas:'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA PRIMEIRA ‚Äì OBJETO'
      },
      {
        type: 'paragraph',
        text: '1.1. O presente contrato tem por objeto a presta√ß√£o de servi√ßos de consultoria corporativa individual e mentoria executiva, incluindo avalia√ß√µes psicol√≥gicas, testes comportamentais e desenvolvimento profissional.'
      },
      {
        type: 'paragraph',
        text: '1.2. Os servi√ßos ser√£o prestados sem exclusividade pela CONTRATADA, de forma individualizada e personalizada conforme as necessidades espec√≠ficas do CONTRATANTE.'
      },
      {
        type: 'paragraph',
        text: '1.3. Inexistir√° qualquer v√≠nculo empregat√≠cio entre a CONTRATADA e o CONTRATANTE, sendo esta uma rela√ß√£o puramente comercial de presta√ß√£o de servi√ßos.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA SEGUNDA ‚Äì DO ESCOPO DA PRESTA√á√ÉO DE SERVI√áOS'
      },
      {
        type: 'paragraph',
        text: `2.1. O escopo de entregas previstas neste contrato de mentoria e consultoria individual inclui: ${services}`
      },
      {
        type: 'paragraph',
        text: '2.2. As sess√µes de mentoria ser√£o realizadas conforme cronograma acordado entre as partes, podendo ser presenciais ou remotas, conforme disponibilidade e conveni√™ncia m√∫tua.'
      },
      {
        type: 'paragraph',
        text: '2.3. A CONTRATADA fornecer√° relat√≥rios e materiais de apoio ao desenvolvimento profissional do CONTRATANTE, incluindo ferramentas de autoavalia√ß√£o e planos de desenvolvimento individual.'
      },
      {
        type: 'paragraph',
        text: '2.4. Ser√£o aplicados testes psicol√≥gicos e comportamentais espec√≠ficos, com emiss√£o de laudos t√©cnicos quando necess√°rio.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA TERCEIRA ‚Äì DOS HONOR√ÅRIOS E FORMA DE PAGAMENTO'
      },
      {
        type: 'paragraph',
        text: `3.1. Pelo efetivo desempenho das atividades dispostas neste contrato, a CONTRATADA receber√° o valor total de ${totalValue}.`
      },
      {
        type: 'paragraph',
        text: `3.2. O pagamento ser√° efetuado mediante transfer√™ncia banc√°ria ou PIX, conforme dados banc√°rios fornecidos pela CONTRATADA.${paymentText}`
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA QUARTA ‚Äì DA VIG√äNCIA'
      },
      {
        type: 'paragraph',
        text: `4.1. O presente contrato vigorar√° de ${startDate} at√© ${endDate}, podendo ser prorrogado mediante acordo entre as partes.`
      },
      {
        type: 'paragraph',
        text: `4.2. N√∫mero do contrato: ${contractNumber}`
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA QUINTA ‚Äì DA CONFIDENCIALIDADE'
      },
      {
        type: 'paragraph',
        text: '5.1. As partes comprometem-se a manter absoluto sigilo sobre todas as informa√ß√µes pessoais e profissionais compartilhadas durante as sess√µes de mentoria e consultoria.'
      },
      {
        type: 'paragraph',
        text: '5.2. A CONTRATADA obriga-se a manter confidencialidade sobre os resultados dos testes aplicados e avalia√ß√µes realizadas, utilizando-os exclusivamente para os fins deste contrato.'
      },
      {
        type: 'paragraph',
        text: '5.3. A obriga√ß√£o de confidencialidade permanecer√° v√°lida mesmo ap√≥s o t√©rmino do contrato.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA SEXTA ‚Äì DA RESCIS√ÉO'
      },
      {
        type: 'paragraph',
        text: '6.1. O presente contrato poder√° ser rescindido por qualquer das partes, mediante aviso pr√©vio de 15 (quinze) dias.'
      },
      {
        type: 'paragraph',
        text: '6.2. Em caso de inadimplemento de qualquer das partes, o contrato poder√° ser rescindido imediatamente.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA S√âTIMA ‚Äì DO FORO'
      },
      {
        type: 'paragraph',
        text: '7.1. As PARTES elegem irrevogavelmente o Foro da Cidade de Goi√¢nia, Estado de Goi√°s, para dirimir quaisquer d√∫vidas oriundas do presente Contrato, com ren√∫ncia a qualquer outro, por mais privilegiado que seja.'
      },
      {
        type: 'paragraph',
        text: 'E, POR ESTAREM ASSIM JUSTAS E CONTRATADAS, as PARTES assinam o presente Contrato em via √∫nica, em formato digital.'
      },
      {
        type: 'paragraph',
        text: `Goi√¢nia-GO, ${this.getCurrentDate()}`
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'signature',
        text: '___________________________________________________'
      },
      {
        type: 'signature',
        text: 'NAUE CONSULTORIA LTDA.',
        bold: true
      },
      {
        type: 'signature',
        text: 'CNPJ: 46.259.049/0001-64'
      },
      {
        type: 'signature',
        text: 'Francisca Mariana Ferreira de Sousa Naue Lopes'
      },
      {
        type: 'signature',
        text: 'S√≥cia Administradora'
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'signature',
        text: '___________________________________________________'
      },
      {
        type: 'signature',
        text: clientName.toUpperCase(),
        bold: true
      },
      {
        type: 'signature',
        text: `CPF: ${clientDocument}`
      },
      {
        type: 'signature',
        text: 'CONTRATANTE',
        bold: true
      }
    ];
  }

  private getRecrutamentoContent(clientName: string, clientDocument: string, contractNumber: string, totalValue: string, startDate: string, endDate: string, services: string, paymentText: string): any[] {
    return [
      {
        type: 'title',
        text: 'CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS DE RECRUTAMENTO E SELE√á√ÉO (R&S)'
      },
      {
        type: 'paragraph',
        text: `Pelo presente contrato particular de presta√ß√£o de servi√ßos de Recrutamento e Sele√ß√£o ("Contrato"), as partes:`
      },
      {
        type: 'paragraph',
        parts: [
          { text: '1. ', bold: false },
          { text: clientName.toUpperCase(), bold: true },
          { text: `, ${this.getClientType(clientDocument)}, inscrita no ${this.getDocumentType(clientDocument)} sob o n¬∫ ${clientDocument}, doravante designada simplesmente como `, bold: false },
          { text: 'CONTRATANTE', bold: true },
          { text: '; e', bold: false }
        ]
      },
      {
        type: 'paragraph',
        parts: [
          { text: '2. ', bold: false },
          { text: 'NAUE CONSULTORIA LTDA.', bold: true },
          { text: ', sociedade empres√°ria limitada, inscrita no CNPJ sob o n. 46.259.049/0001-64, com sede a Avenida Dep. Jamel Cec√≠lio e Rua 14 e Rua 14-A, quadra c-9, lote 02/05-15, Ed. Flamboyant Park Business, sala 409, setor Jardim Goi√°s, Goi√¢nia-GO, cujo endere√ßo eletr√¥nico √© mariana@naueconsultoria.com.br, neste ato representado por sua s√≥cia administradora Francisca Mariana Ferreira de Souza Naue Lopes, na forma de seu Contrato Social, doravante designada simplesmente como ', bold: false },
          { text: 'CONTRATADA', bold: true },
          { text: '.', bold: false }
        ]
      },
      {
        type: 'paragraph',
        text: 'A CONTRATANTE e a CONTRATADA ser√£o conjuntamente designados como "PARTES" e individualmente como "PARTE".'
      },
      {
        type: 'paragraph',
        text: 'ASSIM, as Partes resolvem, de comum acordo, celebrar o presente Contrato, de acordo com as condi√ß√µes abaixo descritas:'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA PRIMEIRA ‚Äì OBJETO'
      },
      {
        type: 'paragraph',
        text: '1.1. O presente contrato tem por objeto a presta√ß√£o de servi√ßos especializados de recrutamento e sele√ß√£o de pessoal, incluindo todo o processo seletivo desde o levantamento de necessidades at√© a apresenta√ß√£o dos candidatos finais.'
      },
      {
        type: 'paragraph',
        text: '1.2. Os servi√ßos ser√£o prestados sem exclusividade pela CONTRATADA, seguindo metodologia pr√≥pria e melhores pr√°ticas do mercado de recursos humanos.'
      },
      {
        type: 'paragraph',
        text: '1.3. Inexistir√° qualquer v√≠nculo empregat√≠cio entre a CONTRATADA e a CONTRATANTE, sendo esta uma rela√ß√£o puramente comercial de presta√ß√£o de servi√ßos.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA SEGUNDA ‚Äì DO ESCOPO DA PRESTA√á√ÉO DE SERVI√áOS'
      },
      {
        type: 'paragraph',
        text: '2.1. O escopo de entregas previstas neste contrato inclui as seguintes etapas:'
      },
      {
        type: 'paragraph',
        text: '**1¬™ Etapa - Levantamento de Necessidades:**'
      },
      {
        type: 'paragraph',
        text: '- Conhecimento do neg√≥cio, da empresa e suas verdadeiras necessidades;'
      },
      {
        type: 'paragraph',
        text: '- Levantamento detalhado do perfil do cargo junto ao cliente;'
      },
      {
        type: 'paragraph',
        text: '- Defini√ß√£o de compet√™ncias t√©cnicas e comportamentais desejadas;'
      },
      {
        type: 'paragraph',
        text: '- An√°lise do ambiente organizacional e cultura empresarial.'
      },
      {
        type: 'paragraph',
        text: '**2¬™ Etapa - Divulga√ß√£o e Capta√ß√£o de Curr√≠culos:**'
      },
      {
        type: 'paragraph',
        text: '- Realiza√ß√£o de an√∫ncios da vaga nas redes sociais e canais de divulga√ß√£o;'
      },
      {
        type: 'paragraph',
        text: '- Utiliza√ß√£o de banco de dados pr√≥prio de candidatos;'
      },
      {
        type: 'paragraph',
        text: '- Headhunting direcionado quando necess√°rio;'
      },
      {
        type: 'paragraph',
        text: '- Divulga√ß√£o em plataformas especializadas de recrutamento.'
      },
      {
        type: 'paragraph',
        text: '**3¬™ Etapa - Recrutamento:**'
      },
      {
        type: 'paragraph',
        text: '- Realiza√ß√£o de triagem dos curr√≠culos de acordo com as exig√™ncias da empresa;'
      },
      {
        type: 'paragraph',
        text: '- Entrevista de sele√ß√£o elaborada e planejada;'
      },
      {
        type: 'paragraph',
        text: '- An√°lise preliminar de adequa√ß√£o ao perfil;'
      },
      {
        type: 'paragraph',
        text: '- Verifica√ß√£o de refer√™ncias profissionais.'
      },
      {
        type: 'paragraph',
        text: '**4¬™ Etapa - Sele√ß√£o:**'
      },
      {
        type: 'paragraph',
        text: '- Aplica√ß√£o de testes situacionais, conhecimentos espec√≠ficos ou t√©cnicos;'
      },
      {
        type: 'paragraph',
        text: '- Avalia√ß√£o Psicol√≥gica com confec√ß√£o de Laudo t√©cnico;'
      },
      {
        type: 'paragraph',
        text: '- Entrevista t√©cnica com o supervisor imediato;'
      },
      {
        type: 'paragraph',
        text: '- Apresenta√ß√£o de relat√≥rio final com recomenda√ß√µes.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA TERCEIRA ‚Äì DOS HONOR√ÅRIOS E FORMA DE PAGAMENTO'
      },
      {
        type: 'paragraph',
        text: `3.1. Pelo efetivo desempenho das atividades dispostas neste contrato, a CONTRATADA receber√° o valor total de ${totalValue}.`
      },
      {
        type: 'paragraph',
        text: `3.2. O pagamento ser√° efetuado conforme cronograma acordado entre as partes, mediante apresenta√ß√£o de nota fiscal de servi√ßos.${paymentText}`
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA QUARTA ‚Äì DA VIG√äNCIA E PRAZO DE EXECU√á√ÉO'
      },
      {
        type: 'paragraph',
        text: `4.1. O presente contrato vigorar√° de ${startDate} at√© ${endDate}.`
      },
      {
        type: 'paragraph',
        text: '4.2. O prazo para conclus√£o do processo seletivo ser√° de at√© 45 (quarenta e cinco) dias corridos, contados a partir da assinatura deste contrato, podendo ser prorrogado mediante acordo entre as partes.'
      },
      {
        type: 'paragraph',
        text: `4.3. N√∫mero do contrato: ${contractNumber}`
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA QUINTA ‚Äì DAS OBRIGA√á√ïES DAS PARTES'
      },
      {
        type: 'paragraph',
        text: '5.1. Obriga√ß√µes da CONTRATADA:'
      },
      {
        type: 'paragraph',
        text: 'a) Executar o processo seletivo com qualidade e dentro dos prazos estabelecidos;'
      },
      {
        type: 'paragraph',
        text: 'b) Manter sigilo absoluto sobre informa√ß√µes da empresa e candidatos;'
      },
      {
        type: 'paragraph',
        text: 'c) Apresentar no m√≠nimo 3 (tr√™s) candidatos finalistas;'
      },
      {
        type: 'paragraph',
        text: 'd) Fornecer relat√≥rios detalhados sobre cada candidato.'
      },
      {
        type: 'paragraph',
        text: '5.2. Obriga√ß√µes da CONTRATANTE:'
      },
      {
        type: 'paragraph',
        text: 'a) Efetuar os pagamentos nos prazos acordados;'
      },
      {
        type: 'paragraph',
        text: 'b) Fornecer informa√ß√µes completas sobre o cargo e perfil desejado;'
      },
      {
        type: 'paragraph',
        text: 'c) Disponibilizar pessoa respons√°vel para acompanhamento do processo;'
      },
      {
        type: 'paragraph',
        text: 'd) Dar retorno sobre os candidatos apresentados em at√© 5 dias √∫teis.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA SEXTA ‚Äì DA CONFIDENCIALIDADE'
      },
      {
        type: 'paragraph',
        text: '6.1. As partes comprometem-se a manter sigilo sobre todas as informa√ß√µes trocadas durante o processo seletivo.'
      },
      {
        type: 'paragraph',
        text: '6.2. A CONTRATADA obriga-se a manter confidencialidade sobre os dados dos candidatos e resultados das avalia√ß√µes.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA S√âTIMA ‚Äì DA GARANTIA'
      },
      {
        type: 'paragraph',
        text: '7.1. A CONTRATADA oferece garantia de 90 (noventa) dias sobre o profissional contratado, comprometendo-se a realizar novo processo seletivo sem custos adicionais caso o candidato contratado seja desligado por inadequa√ß√£o ao cargo neste per√≠odo.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA OITAVA ‚Äì DO FORO'
      },
      {
        type: 'paragraph',
        text: '8.1. As PARTES elegem irrevogavelmente o Foro da Cidade de Goi√¢nia, Estado de Goi√°s, para dirimir quaisquer d√∫vidas oriundas do presente Contrato, com ren√∫ncia a qualquer outro, por mais privilegiado que seja.'
      },
      {
        type: 'paragraph',
        text: 'E, POR ESTAREM ASSIM JUSTAS E CONTRATADAS, as PARTES assinam o presente Contrato em via √∫nica, em formato digital.'
      },
      {
        type: 'paragraph',
        text: `Goi√¢nia-GO, ${this.getCurrentDate()}`
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'signature',
        text: '___________________________________________________'
      },
      {
        type: 'signature',
        text: 'NAUE CONSULTORIA LTDA.',
        bold: true
      },
      {
        type: 'signature',
        text: 'CNPJ: 46.259.049/0001-64'
      },
      {
        type: 'signature',
        text: 'Francisca Mariana Ferreira de Souza Naue Lopes'
      },
      {
        type: 'signature',
        text: 'S√≥cia Administradora'
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'signature',
        text: '___________________________________________________'
      },
      {
        type: 'signature',
        text: clientName.toUpperCase(),
        bold: true
      },
      {
        type: 'signature',
        text: `${this.getDocumentType(clientDocument)}: ${clientDocument}`
      },
      {
        type: 'signature',
        text: 'CONTRATANTE',
        bold: true
      }
    ];
  }

  private formatCurrency(value: number): string {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(value);
  }

  private formatDate(dateString: string): string {
    if (!dateString) return '[DATA]';
    
    // Se a data est√° no formato YYYY-MM-DD, adicionar T00:00:00 para garantir que seja interpretada como local
    const normalizedDateString = dateString.includes('T') ? dateString : `${dateString}T00:00:00`;
    const date = new Date(normalizedDateString);
    return date.toLocaleDateString('pt-BR');
  }

  private generateFileName(contract: any, templateId: string, extension: string): string {
    const clientName = this.getClientName(contract.client);
    const sanitizedClientName = clientName.replace(/[^a-zA-Z0-9]/g, '_');
    const contractNumber = contract.contract_number || 'Contrato';
    const templateName = this.getTemplateName(templateId);
    
    return `${contractNumber}_${sanitizedClientName}_${templateName}.${extension}`;
  }

  private getTemplateName(templateId: string): string {
    switch (templateId) {
      case 'consultoria-pj': return 'Consultoria_PJ';
      case 'consultoria-pf': return 'Consultoria_PF';
      case 'recrutamento': return 'Recrutamento';
      default: return 'Contrato';
    }
  }

  private getClientType(document: string): string {
    // Detecta se √© CPF (11 d√≠gitos) ou CNPJ (14 d√≠gitos)
    const numbersOnly = document.replace(/\D/g, '');
    return numbersOnly.length === 11 ? 'pessoa f√≠sica' : 'sociedade empres√°ria limitada';
  }

  private getDocumentType(document: string): string {
    const numbersOnly = document.replace(/\D/g, '');
    return numbersOnly.length === 11 ? 'CPF' : 'CNPJ';
  }

  private getCurrentDate(): string {
    const now = new Date();
    return now.toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: 'long',
      year: 'numeric'
    });
  }

  private getClientDocument(client: any): string {
    if (!client) return '000.000.000-00';
    
    // Para PF (Pessoa F√≠sica)
    if (client.clients_pf && client.clients_pf.length > 0) {
      return client.clients_pf[0].cpf || '000.000.000-00';
    }
    
    // Para PJ (Pessoa Jur√≠dica)
    if (client.clients_pj && client.clients_pj.length > 0) {
      return client.clients_pj[0].cnpj || '00.000.000/0000-00';
    }
    
    // Campos diretos do cliente
    if (client.cpf) return client.cpf;
    if (client.cnpj) return client.cnpj;
    if (client.document) return client.document;
    
    // Fallback padr√£o
    return '000.000.000-00';
  }

  private getClientName(client: any): string {
    if (!client) return 'Cliente n√£o informado';

    // Se j√° tem nome processado
    if (client.name) return client.name;

    // Para PF (Pessoa F√≠sica)
    if (client.clients_pf && client.clients_pf.length > 0) {
      return client.clients_pf[0].full_name || 'Nome n√£o informado';
    }

    // Para PJ (Pessoa Jur√≠dica)
    if (client.clients_pj && client.clients_pj.length > 0) {
      return client.clients_pj[0].company_name || client.clients_pj[0].trade_name || 'Empresa n√£o informada';
    }

    return 'Cliente n√£o identificado';
  }

  private getClientAddress(client: any): string {
    if (!client) return '[ENDERE√áO DO CLIENTE]';

    const street = client.street || '';
    const number = client.number || '';
    const complement = client.complement ? `, ${client.complement}` : '';
    const neighborhood = client.neighborhood || '';
    const city = client.city || '';
    const state = client.state || '';
    const zipcode = client.zipcode || '';

    if (!street || !number || !neighborhood || !city || !state || !zipcode) {
      return '[ENDERE√áO DO CLIENTE]';
    }

    return `${street}, ${number}${complement}, ${neighborhood}, ${city}-${state}, CEP ${zipcode}`;
  }

  private getClientEmail(client: any): string {
    if (!client) return '[EMAIL DO CLIENTE]';

    return client.email || '[EMAIL DO CLIENTE]';
  }

  private getClientRepresentative(client: any): string {
    if (!client) return '[REPRESENTANTE DO CLIENTE]';

    // Para PJ (Pessoa Jur√≠dica)
    if (client.clients_pj && client.clients_pj.length > 0) {
      return client.clients_pj[0].legal_representative || '[REPRESENTANTE DO CLIENTE]';
    }

    return '[REPRESENTANTE DO CLIENTE]';
  }

  private formatServicesWithDescriptions(contractServices: any[]): string {
    if (!contractServices || contractServices.length === 0) {
      return '[SERVI√áOS]';
    }

    // Filtrar servi√ßos internos e formatar com nome e descri√ß√£o
    const formattedServices = contractServices
      .filter(cs => {
        // Filtrar servi√ßos do tipo "Interno" ou com categoria "Interno"
        const service = cs.service;
        if (!service) return false;

        // Verificar se o servi√ßo n√£o √© interno
        const isInternal = service.category?.toLowerCase() === 'interno' ||
                          service.name?.toLowerCase().includes('interno');
        return !isInternal;
      })
      .map(cs => {
        const service = cs.service;
        if (!service) return '';

        // Formatar: Nome do Servi√ßo - Descri√ß√£o (sem tags HTML)
        let formatted = service.name || 'Servi√ßo';
        if (service.description) {
          const cleanDescription = this.stripHtmlTags(service.description);
          formatted += `: ${cleanDescription}`;
        }
        return formatted;
      })
      .filter(s => s); // Remover strings vazias

    return formattedServices.length > 0 ? formattedServices.join('; ') : '[SERVI√áOS]';
  }

  private stripHtmlTags(html: string): string {
    if (!html) return '';

    // Remove todas as tags HTML
    let text = html.replace(/<[^>]*>/g, '');

    // Decodifica entidades HTML comuns
    text = text
      .replace(/&nbsp;/g, ' ')
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace(/&quot;/g, '"')
      .replace(/&#39;/g, "'")
      .replace(/&ldquo;/g, '‚Äú')
      .replace(/&rdquo;/g, '‚Äù')
      .replace(/&ndash;/g, '‚Äì')
      .replace(/&mdash;/g, '‚Äî');

    // Remove espa√ßos m√∫ltiplos e trim
    return text.replace(/\s+/g, ' ').trim();
  }

  private formatServicesDetailed(contractServices: any[]): any[] {
    if (!contractServices || contractServices.length === 0) {
      return [{ type: 'paragraph', text: '[SERVI√áOS]' }];
    }

    // Filtrar servi√ßos internos
    const validServices = contractServices.filter(cs => {
      const service = cs.service;
      if (!service) return false;

      const isInternal = service.category?.toLowerCase() === 'interno' ||
                        service.name?.toLowerCase().includes('interno');
      return !isInternal;
    });

    if (validServices.length === 0) {
      return [{ type: 'paragraph', text: '[SERVI√áOS]' }];
    }

    // Criar par√°grafos para cada servi√ßo
    const servicesParagraphs: any[] = [];

    validServices.forEach((cs, index) => {
      const service = cs.service;
      if (!service) return;

      const serviceName = service.name || 'Servi√ßo';
      const serviceDescription = service.description || '';

      // Adicionar nome do servi√ßo em negrito
      servicesParagraphs.push({
        type: 'paragraph',
        parts: [
          { text: `‚Ä¢ `, bold: false },
          { text: serviceName, bold: true }
        ]
      });

      // Se tiver descri√ß√£o, adicionar como texto simples
      if (serviceDescription) {
        const cleanDescription = this.stripHtmlTags(serviceDescription);

        if (cleanDescription) {
          servicesParagraphs.push({
            type: 'paragraph',
            text: `  ${cleanDescription}`
          });
        }
      }
    });

    return servicesParagraphs;
  }

  private isContractInstallment(contract: any): boolean {
    return contract.installment_count > 1 || (contract.installments && contract.installments.length > 0);
  }

  private formatInstallments(contract: any): string {
    if (!this.isContractInstallment(contract) || !contract.installments) {
      return '';
    }

    const installments = contract.installments;
    if (!Array.isArray(installments) || installments.length === 0) {
      return '';
    }

    // Formatar as parcelas
    const formattedInstallments = installments.map((installment: any, index: number) => {
      const dueDate = this.formatDate(installment.due_date);
      const amount = this.formatCurrency(installment.amount || 0);
      const installmentNumber = installment.installment_number || (index + 1);
      
      return `${installmentNumber}¬™ parcela: ${amount} - Vencimento: ${dueDate}`;
    }).join('\n');

    return `\n\nPARCELAMENTO:\n${formattedInstallments}`;
  }

  // M√©todos para lidar com informa√ß√µes de permuta
  private hasBarterPayment(contract: any): boolean {
    return contract.payment_method === 'Permuta' && contract.barter_type;
  }

  private getBarterAmount(contract: any): number {
    if (!this.hasBarterPayment(contract)) return 0;
    
    if (contract.barter_type === 'percentage' && contract.barter_percentage) {
      return (contract.total_value * contract.barter_percentage) / 100;
    } else if (contract.barter_type === 'value' && contract.barter_value) {
      return Math.min(contract.barter_value, contract.total_value);
    }
    
    return 0;
  }

  private getRemainingValueAfterBarter(contract: any): number {
    if (!this.hasBarterPayment(contract)) return contract.total_value;
    
    const barterAmount = this.getBarterAmount(contract);
    return Math.max(0, contract.total_value - barterAmount);
  }

  private formatBarterInfo(contract: any): string {
    if (!this.hasBarterPayment(contract)) return '';

    const barterAmount = this.getBarterAmount(contract);
    const remainingValue = this.getRemainingValueAfterBarter(contract);
    
    let barterDetails = '';
    if (contract.barter_type === 'percentage') {
      barterDetails = `${contract.barter_percentage}% do valor total`;
    } else if (contract.barter_type === 'value') {
      barterDetails = `valor fixo de ${this.formatCurrency(contract.barter_value)}`;
    }

    let paymentInfo = `\n\nDETALHES DO PAGAMENTO:\n`;
    paymentInfo += `‚Ä¢ Forma de pagamento principal: Permuta (${barterDetails})\n`;
    paymentInfo += `‚Ä¢ Valor total do contrato: ${this.formatCurrency(contract.total_value)}\n`;
    paymentInfo += `‚Ä¢ Valor abatido por permuta: ${this.formatCurrency(barterAmount)}`;

    if (remainingValue > 0) {
      paymentInfo += `\n‚Ä¢ Valor restante a pagar: ${this.formatCurrency(remainingValue)}`;
      
      if (contract.secondary_payment_method) {
        paymentInfo += `\n‚Ä¢ Forma de pagamento do valor restante: ${contract.secondary_payment_method}`;
        
        // Se o valor restante for parcelado
        if (contract.installment_count > 1 && contract.installments) {
          const installmentsText = this.formatInstallments(contract);
          paymentInfo += installmentsText.replace('PARCELAMENTO:', '\nPARCELAMENTO DO VALOR RESTANTE:');
        }
      }
    } else {
      paymentInfo += `\n‚Ä¢ O valor total ser√° pago integralmente atrav√©s de permuta.`;
    }

    return paymentInfo;
  }
}