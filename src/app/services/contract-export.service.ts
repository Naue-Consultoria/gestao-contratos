import { Injectable } from '@angular/core';
// Lazy load heavy dependencies

@Injectable({
  providedIn: 'root'
})
export class ContractExportService {

  async exportToDocx(contract: any, templateId: string): Promise<void> {
    try {
      console.log('üîÑ Iniciando exporta√ß√£o DOCX...');
      
      // Carregar m√≥dulo DOCX sem depend√™ncia do Buffer
      const docxModule = await this.loadDocxModuleForBrowser();
      console.log('‚úÖ M√≥dulo DOCX carregado');
      
      // Criar documento DOCX
      const doc = await this.createDocxDocument(contract, templateId, docxModule);
      console.log('‚úÖ Documento DOCX criado');
      
      // Converter para Blob usando API nativa do navegador
      const blob = await this.convertDocxToBlob(doc, docxModule);
      console.log('‚úÖ Blob gerado com sucesso');
      
      // Download do arquivo
      const fileName = this.generateFileName(contract, templateId, 'docx');
      await this.downloadBlob(blob, fileName);
      console.log('‚úÖ Exporta√ß√£o DOCX conclu√≠da');
      
    } catch (error) {
      console.error('‚ùå Erro na exporta√ß√£o DOCX:', error);
      
      // Fallback para PDF se DOCX falhar
      console.log('üîÑ Tentando fallback para PDF...');
      try {
        await this.exportToPdf(contract, templateId);
        this.showUserNotification('N√£o foi poss√≠vel exportar como DOCX. O arquivo foi exportado como PDF.');
      } catch (pdfError) {
        console.error('‚ùå Erro no fallback PDF:', pdfError);
        this.showUserNotification('Erro ao exportar documento. Tente novamente ou atualize a p√°gina.');
        throw new Error('Falha completa na exporta√ß√£o de documentos');
      }
    }
  }

  /**
   * Carrega m√≥dulo DOCX sem depend√™ncias do Node.js/Buffer
   */
  private async loadDocxModuleForBrowser(): Promise<any> {
    try {
      console.log('üîÑ Carregando m√≥dulo DOCX para navegador...');
      
      const module = await import('docx');
      
      // Verificar se os componentes necess√°rios est√£o dispon√≠veis
      const requiredComponents = ['Document', 'Packer', 'Paragraph', 'TextRun', 'HeadingLevel', 'AlignmentType'];
      const missingComponents = requiredComponents.filter(comp => !(module as any)[comp]);
      
      if (missingComponents.length > 0) {
        throw new Error(`Componentes DOCX faltando: ${missingComponents.join(', ')}`);
      }
      
      console.log('‚úÖ M√≥dulo DOCX carregado para navegador');
      return module;
      
    } catch (error) {
      console.error('‚ùå Erro ao carregar m√≥dulo DOCX:', error);
      throw new Error('N√£o foi poss√≠vel carregar a biblioteca de exporta√ß√£o DOCX');
    }
  }

  /**
   * Converte documento DOCX para Blob usando APIs nativas do navegador
   */
  private async convertDocxToBlob(doc: any, docxModule: any): Promise<Blob> {
    try {
      console.log('üîÑ Convertendo documento para Blob...');
      
      // Usar Packer.toBlob que √© uma API nativa do navegador
      const blob = await docxModule.Packer.toBlob(doc);
      
      if (!(blob instanceof Blob)) {
        throw new Error('Falha ao gerar Blob do documento DOCX');
      }
      
      console.log('‚úÖ Convers√£o para Blob bem-sucedida, tamanho:', blob.size, 'bytes');
      return blob;
      
    } catch (error) {
      console.error('‚ùå Erro na convers√£o para Blob:', error);
      
      // Fallback: tentar usar toBase64 e converter para Blob
      try {
        console.log('üîÑ Tentando fallback com base64...');
        const base64String = await docxModule.Packer.toBase64String(doc);
        
        // Converter base64 para Uint8Array
        const binaryString = atob(base64String);
        const bytes = new Uint8Array(binaryString.length);
        
        for (let i = 0; i < binaryString.length; i++) {
          bytes[i] = binaryString.charCodeAt(i);
        }
        
        // Criar Blob a partir do Uint8Array
        const blob = new Blob([bytes], { 
          type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
        });
        
        console.log('‚úÖ Fallback base64 bem-sucedido, tamanho:', blob.size, 'bytes');
        return blob;
        
      } catch (fallbackError) {
        console.error('‚ùå Fallback base64 tamb√©m falhou:', fallbackError);
        throw new Error('N√£o foi poss√≠vel converter documento para formato de download');
      }
    }
  }

  /**
   * Faz download do Blob usando APIs nativas do navegador
   */
  private async downloadBlob(blob: Blob, fileName: string): Promise<void> {
    try {
      console.log('üîÑ Iniciando download:', fileName);
      
      // Primeira tentativa: usar file-saver se dispon√≠vel
      try {
        const fileSaver = await import('file-saver');
        if (fileSaver.saveAs) {
          fileSaver.saveAs(blob, fileName);
          console.log('‚úÖ Download via file-saver');
          return;
        }
      } catch (fileSaverError) {
        console.log('‚ö†Ô∏è file-saver n√£o dispon√≠vel, usando m√©todo nativo');
      }
      
      // Fallback: usar APIs nativas do navegador
      this.downloadBlobNative(blob, fileName);
      console.log('‚úÖ Download via API nativa');
      
    } catch (error) {
      console.error('‚ùå Erro no download:', error);
      throw new Error('N√£o foi poss√≠vel fazer download do arquivo');
    }
  }

  /**
   * Download usando APIs nativas do navegador (sem depend√™ncias externas)
   */
  private downloadBlobNative(blob: Blob, fileName: string): void {
    try {
      // Criar URL do Blob
      const url = URL.createObjectURL(blob);
      
      // Criar elemento de link tempor√°rio
      const link = document.createElement('a');
      link.href = url;
      link.download = fileName;
      link.style.display = 'none';
      
      // Adicionar ao DOM, clicar e remover
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Limpar URL ap√≥s um pequeno delay
      setTimeout(() => {
        URL.revokeObjectURL(url);
      }, 100);
      
    } catch (error) {
      console.error('‚ùå Erro no download nativo:', error);
      
      // √öltimo recurso: abrir em nova aba
      try {
        const url = URL.createObjectURL(blob);
        const newWindow = window.open(url, '_blank');
        if (!newWindow) {
          throw new Error('Popup bloqueado');
        }
        console.log('‚úÖ Arquivo aberto em nova aba');
      } catch (finalError) {
        console.error('‚ùå Todas as tentativas falharam:', finalError);
        throw new Error('N√£o foi poss√≠vel fazer download. Verifique se popups est√£o habilitados.');
      }
    }
  }

  /**
   * Mostra notifica√ß√£o para o usu√°rio
   */
  private showUserNotification(message: string): void {
    // Usar alert simples por enquanto - pode ser substitu√≠do por toast/modal
    alert(message);
  }



  async exportToPdf(contract: any, templateId: string): Promise<void> {
    try {
      console.log('üîÑ Iniciando exporta√ß√£o PDF...');
      
      // Lazy load jsPDF dependency with error handling
      const jsPDFModule = await this.loadJsPDFModule();
      const jsPDF = jsPDFModule.jsPDF;
      
      const content = this.generatePdfContent(contract, templateId);
      const pdf = new jsPDF('p', 'mm', 'a4');
    
      // Configura√ß√µes da p√°gina
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 20;
      const lineHeight = 7;
      let currentY = margin;
    
      // Fun√ß√£o para adicionar texto com quebra de linha
      const addText = (text: string, fontSize: number = 10, isBold: boolean = false) => {
        pdf.setFontSize(fontSize);
        pdf.setFont('helvetica', isBold ? 'bold' : 'normal');
        
        const lines = pdf.splitTextToSize(text, pageWidth - 2 * margin);
        
        for (const line of lines) {
          if (currentY > pageHeight - margin) {
            pdf.addPage();
            currentY = margin;
          }
          
          pdf.text(line, margin, currentY);
          currentY += lineHeight;
        }
        
        currentY += lineHeight * 0.5; // Espa√ßamento extra entre par√°grafos
      };
      
      // Fun√ß√£o para adicionar texto com partes em negrito
      const addTextWithParts = (parts: any[], fontSize: number = 10) => {
        pdf.setFontSize(fontSize);
        let currentX = margin;
        
        for (const part of parts) {
          pdf.setFont('helvetica', part.bold ? 'bold' : 'normal');
          const textWidth = pdf.getTextWidth(part.text);
          
          // Verificar se precisa quebrar linha
          if (currentX + textWidth > pageWidth - margin) {
            currentY += lineHeight;
            currentX = margin;
            
            if (currentY > pageHeight - margin) {
              pdf.addPage();
              currentY = margin;
            }
          }
          
          pdf.text(part.text, currentX, currentY);
          currentX += textWidth;
        }
        
        currentY += lineHeight * 1.5;
      };
      
      // Gerar conte√∫do
      for (const section of content) {
        if (section.type === 'title') {
          currentY += lineHeight;
          addText(section.text, 16, true);
          currentY += lineHeight;
        } else if (section.type === 'heading') {
          currentY += lineHeight * 0.5;
          addText(section.text, 12, true);
        } else if (section.type === 'spacing') {
          currentY += lineHeight;
        } else if (section.type === 'signature') {
          addText(section.text, 10, section.bold || false);
        } else if (section.type === 'paragraph' && section.parts) {
          addTextWithParts(section.parts, 10);
        } else {
          addText(section.text, 10, false);
        }
      }
    
      const fileName = this.generateFileName(contract, templateId, 'pdf');
      pdf.save(fileName);
      console.log('‚úÖ Exporta√ß√£o PDF conclu√≠da');
      
    } catch (error) {
      console.error('‚ùå Erro na exporta√ß√£o PDF:', error);
      throw new Error('Erro ao exportar PDF. Tente novamente.');
    }
  }

  private async loadJsPDFModule(): Promise<any> {
    try {
      console.log('üîÑ Carregando m√≥dulo jsPDF...');
      
      const module = await import('jspdf');
      
      if (!module.jsPDF) {
        console.error('‚ùå jsPDF n√£o encontrado no m√≥dulo');
        throw new Error('M√≥dulo jsPDF incompleto');
      }
      
      console.log('‚úÖ M√≥dulo jsPDF carregado com sucesso');
      return module;
      
    } catch (error) {
      console.error('‚ùå Erro ao carregar m√≥dulo jsPDF:', error);
      throw new Error('N√£o foi poss√≠vel carregar o m√≥dulo de exporta√ß√£o PDF');
    }
  }

  private async createDocxDocument(contract: any, templateId: string, docxModule: any): Promise<any> {
    const { Document, Paragraph, TextRun, HeadingLevel, AlignmentType } = docxModule;
    const content = this.generateDocumentContent(contract, templateId);
    
    return new Document({
      sections: [{
        children: content.map(section => {
          if (section.type === 'title') {
            return new Paragraph({
              children: [new TextRun({
                text: section.text,
                bold: true,
                size: 32
              })],
              heading: HeadingLevel.TITLE,
              alignment: AlignmentType.CENTER,
              spacing: { after: 400 }
            });
          } else if (section.type === 'heading') {
            return new Paragraph({
              children: [new TextRun({
                text: section.text,
                bold: true,
                size: 24
              })],
              heading: HeadingLevel.HEADING_1,
              spacing: { before: 300, after: 200 }
            });
          } else if (section.type === 'spacing') {
            return new Paragraph({
              children: [new TextRun({ text: '', size: 20 })],
              spacing: { after: 240 }
            });
          } else if (section.type === 'signature') {
            return new Paragraph({
              children: [new TextRun({
                text: section.text,
                size: 20,
                bold: section.bold || false
              })],
              alignment: AlignmentType.CENTER,
              spacing: { after: 120 }
            });
          } else if (section.type === 'paragraph-bold') {
            return new Paragraph({
              children: [new TextRun({
                text: section.text,
                size: 20,
                bold: true
              })],
              alignment: AlignmentType.JUSTIFIED,
              spacing: { after: 120 }
            });
          } else {
            // Para par√°grafos normais, verificar se h√° partes em negrito
            if (section.parts) {
              return new Paragraph({
                children: section.parts.map((part: any) => new TextRun({
                  text: part.text,
                  size: 20,
                  bold: part.bold || false
                })),
                alignment: AlignmentType.JUSTIFIED,
                spacing: { after: 120 }
              });
            } else {
              return new Paragraph({
                children: [new TextRun({
                  text: section.text,
                  size: 20
                })],
                alignment: AlignmentType.JUSTIFIED,
                spacing: { after: 120 }
              });
            }
          }
        })
      }]
    });
  }

  private generateDocumentContent(contract: any, templateId: string): any[] {
    // Usar m√©todos auxiliares para extrair dados do cliente
    const clientName = this.getClientName(contract.client);
    const clientDocument = this.getClientDocument(contract.client);
    
    const contractNumber = contract.contract_number || '[NUMERO_CONTRATO]';
    const totalValue = this.formatCurrency(contract.total_value || 0);
    const startDate = this.formatDate(contract.start_date);
    const endDate = this.formatDate(contract.end_date);
    
    const services = contract.contract_services?.map((cs: any) => cs.service?.name || 'Servi√ßo').join(', ') || '[SERVICOS]';
    
    // Log para debug
    console.log('üìä Dados do contrato:', {
      clientName,
      clientDocument,
      contractNumber,
      totalValue,
      startDate,
      endDate,
      services
    });
    
    switch (templateId) {
      case 'consultoria-pj':
        return this.getConsultoriaPJContent(clientName, clientDocument, contractNumber, totalValue, startDate, endDate, services);
      case 'consultoria-pf':
        return this.getConsultoriaPFContent(clientName, clientDocument, contractNumber, totalValue, startDate, endDate, services);
      case 'recrutamento':
        return this.getRecrutamentoContent(clientName, clientDocument, contractNumber, totalValue, startDate, endDate, services);
      default:
        return [];
    }
  }

  private generatePdfContent(contract: any, templateId: string): any[] {
    return this.generateDocumentContent(contract, templateId);
  }

  private getConsultoriaPJContent(clientName: string, clientDocument: string, contractNumber: string, totalValue: string, startDate: string, endDate: string, services: string): any[] {
    return [
      {
        type: 'title',
        text: 'CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS DE CONSULTORIA CORPORATIVA'
      },
      {
        type: 'paragraph',
        text: `Pelo presente contrato particular de presta√ß√£o de servi√ßos de Consultoria Corporativa ("Contrato"), as partes:`
      },
      {
        type: 'paragraph',
        parts: [
          { text: '1. ', bold: false },
          { text: clientName.toUpperCase(), bold: true },
          { text: `, ${this.getClientType(clientDocument)}, inscrita no ${this.getDocumentType(clientDocument)} sob o n¬∫ ${clientDocument}, doravante designada simplesmente como `, bold: false },
          { text: 'CONTRATANTE', bold: true },
          { text: '; e', bold: false }
        ]
      },
      {
        type: 'paragraph',
        parts: [
          { text: '2. ', bold: false },
          { text: 'NAUE CONSULTORIA LTDA.', bold: true },
          { text: ', sociedade empres√°ria limitada, inscrita no CNPJ sob o n. 46.259.049/0001-64, com sede a Avenida Dep. Jamel Cec√≠lio e Rua 14 e Rua 14-A, quadra c-9, lote 02/05-15, Ed. Flamboyant Park Business, sala 409, Jardim Goi√°s, Goi√¢nia-GO, cujo endere√ßo eletr√¥nico √© mariana@naueconsultoria.com.br, neste ato representado por sua s√≥cia administradora Francisca Mariana Ferreira de Sousa Naue Lopes, na forma de seu Contrato Social, doravante designada simplesmente como ', bold: false },
          { text: 'CONTRATADA', bold: true },
          { text: '.', bold: false }
        ]
      },
      {
        type: 'paragraph',
        text: 'A CONTRATANTE e a CONTRATADA ser√£o conjuntamente designados como "PARTES" e individualmente como "PARTE".'
      },
      {
        type: 'paragraph',
        text: 'ASSIM, as Partes resolvem, de comum acordo, celebrar o presente Contrato, de acordo com as condi√ß√µes abaixo descritas:'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA PRIMEIRA ‚Äì OBJETO'
      },
      {
        type: 'paragraph',
        text: '1.1. As partes acima identificadas t√™m, entre si, justo e acertado o presente Contrato de Presta√ß√£o de Servi√ßos em Consultoria Corporativa, considerando as disposi√ß√µes do C√≥digo Civil Brasileiro, que se reger√° com fundamento nos artigos 421, 422, 425, 594 e 598 do C√≥digo Civil Brasileiro, bem como no princ√≠pio do pacta sunt servanda e na Lei 13.429/17 (Lei da Terceiriza√ß√£o), pelas cl√°usulas, condi√ß√µes de pre√ßo, forma e termo de pagamento descritas no presente contrato.'
      },
      {
        type: 'paragraph',
        text: '1.2. O objeto do presente contrato e demais servi√ßos ser√£o prestados sem exclusividade pela CONTRATADA.'
      },
      {
        type: 'paragraph',
        text: '1.3. Todos os servi√ßos elencados no presente Contrato ser√£o executados por pessoal devidamente habilitado pela CONTRATADA, a quem compete com exclusividade o pagamento pelos trabalhos realizados, a fiscaliza√ß√£o e o cumprimento do ora pactuado, bem como todas as demais obriga√ß√µes legais, ficando desta forma, expressamente exclu√≠da a responsabilidade da CONTRATANTE sobre qualquer mat√©ria trabalhista e/ou tribut√°ria disposta neste Contrato.'
      },
      {
        type: 'paragraph',
        text: '1.4. Inexistir√° qualquer v√≠nculo empregat√≠cio entre a CONTRATADA e a CONTRATANTE, sem preju√≠zo da obriga√ß√£o da CONTRATADA de respeitar as pol√≠ticas internas da Contratante e demais obriga√ß√µes e limita√ß√µes previstas no presente Contrato e na legisla√ß√£o vigente.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA SEGUNDA ‚Äì DO ESCOPO DA PRESTA√á√ÉO DE SERVI√áOS'
      },
      {
        type: 'paragraph',
        text: `2.1. O escopo de entregas previstas neste contrato inclui: ${services}`
      },
      {
        type: 'paragraph',
        text: '2.2. Os servi√ßos ser√£o executados conforme cronograma e metodologia estabelecidos pela CONTRATADA, sempre em conson√¢ncia com as necessidades e objetivos da CONTRATANTE.'
      },
      {
        type: 'paragraph',
        text: '2.3. A CONTRATADA compromete-se a entregar relat√≥rios peri√≥dicos sobre o andamento dos trabalhos, bem como apresentar os resultados obtidos ao final de cada etapa.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA TERCEIRA ‚Äì DOS HONOR√ÅRIOS E FORMA DE PAGAMENTO'
      },
      {
        type: 'paragraph',
        text: `3.1. Pelo efetivo desempenho das atividades dispostas neste contrato, a CONTRATADA receber√° o valor total de ${totalValue}.`
      },
      {
        type: 'paragraph',
        text: '3.2. O pagamento ser√° efetuado conforme cronograma financeiro acordado entre as partes, mediante apresenta√ß√£o de nota fiscal de servi√ßos.'
      },
      {
        type: 'paragraph',
        text: '3.3. Em caso de atraso no pagamento, incidir√£o juros de mora de 1% ao m√™s e multa de 2% sobre o valor em atraso.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA QUARTA ‚Äì DA VIG√äNCIA'
      },
      {
        type: 'paragraph',
        text: `4.1. O presente contrato vigorar√° de ${startDate} at√© ${endDate}, podendo ser prorrogado mediante acordo entre as partes.`
      },
      {
        type: 'paragraph',
        text: `4.2. N√∫mero do contrato: ${contractNumber}`
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA QUINTA ‚Äì DAS OBRIGA√á√ïES DAS PARTES'
      },
      {
        type: 'paragraph',
        text: '5.1. Obriga√ß√µes da CONTRATADA:'
      },
      {
        type: 'paragraph',
        text: 'a) Executar os servi√ßos com qualidade e dentro dos prazos estabelecidos;'
      },
      {
        type: 'paragraph',
        text: 'b) Manter sigilo absoluto sobre informa√ß√µes confidenciais da CONTRATANTE;'
      },
      {
        type: 'paragraph',
        text: 'c) Disponibilizar profissionais qualificados para execu√ß√£o dos servi√ßos.'
      },
      {
        type: 'paragraph',
        text: '5.2. Obriga√ß√µes da CONTRATANTE:'
      },
      {
        type: 'paragraph',
        text: 'a) Efetuar os pagamentos nos prazos acordados;'
      },
      {
        type: 'paragraph',
        text: 'b) Fornecer informa√ß√µes necess√°rias para execu√ß√£o dos servi√ßos;'
      },
      {
        type: 'paragraph',
        text: 'c) Disponibilizar acesso √†s depend√™ncias e sistemas quando necess√°rio.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA SEXTA ‚Äì DA CONFIDENCIALIDADE'
      },
      {
        type: 'paragraph',
        text: '6.1. As partes comprometem-se a manter sigilo sobre todas as informa√ß√µes confidenciais trocadas durante a vig√™ncia deste contrato.'
      },
      {
        type: 'paragraph',
        text: '6.2. A obriga√ß√£o de confidencialidade permanecer√° v√°lida mesmo ap√≥s o t√©rmino do contrato.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA S√âTIMA ‚Äì DA RESCIS√ÉO'
      },
      {
        type: 'paragraph',
        text: '7.1. O presente contrato poder√° ser rescindido por qualquer das partes, mediante aviso pr√©vio de 30 (trinta) dias.'
      },
      {
        type: 'paragraph',
        text: '7.2. Em caso de inadimplemento de qualquer das partes, o contrato poder√° ser rescindido imediatamente.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA OITAVA ‚Äì DO FORO'
      },
      {
        type: 'paragraph',
        text: '8.1. As PARTES elegem irrevogavelmente o Foro da Cidade de Goi√¢nia, Estado de Goi√°s, para dirimir quaisquer d√∫vidas oriundas do presente Contrato, com ren√∫ncia a qualquer outro, por mais privilegiado que seja.'
      },
      {
        type: 'paragraph',
        text: 'E, POR ESTAREM ASSIM JUSTAS E CONTRATADAS, as PARTES assinam o presente Contrato em via √∫nica, em formato digital, por meio dos seus representantes legais devidamente autorizados.'
      },
      {
        type: 'paragraph',
        text: `Goi√¢nia-GO, ${this.getCurrentDate()}`
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'signature',
        text: '___________________________________________________'
      },
      {
        type: 'signature',
        text: 'NAUE CONSULTORIA LTDA.',
        bold: true
      },
      {
        type: 'signature',
        text: 'CNPJ: 46.259.049/0001-64'
      },
      {
        type: 'signature',
        text: 'Francisca Mariana Ferreira de Sousa Naue Lopes'
      },
      {
        type: 'signature',
        text: 'S√≥cia Administradora'
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'signature',
        text: '___________________________________________________'
      },
      {
        type: 'signature',
        text: clientName.toUpperCase(),
        bold: true
      },
      {
        type: 'signature',
        text: `${this.getDocumentType(clientDocument)}: ${clientDocument}`
      },
      {
        type: 'signature',
        text: 'CONTRATANTE',
        bold: true
      }
    ];
  }

  private getConsultoriaPFContent(clientName: string, clientDocument: string, contractNumber: string, totalValue: string, startDate: string, endDate: string, services: string): any[] {
    return [
      {
        type: 'title',
        text: 'CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS DE CONSULTORIA CORPORATIVA'
      },
      {
        type: 'paragraph',
        text: `Pelo presente contrato particular de presta√ß√£o de servi√ßos de Consultoria Corporativa ("Contrato"), as partes:`
      },
      {
        type: 'paragraph',
        parts: [
          { text: '1. ', bold: false },
          { text: clientName.toUpperCase(), bold: true },
          { text: `, inscrito no CPF sob o n¬∫ ${clientDocument}, doravante designado simplesmente como `, bold: false },
          { text: 'CONTRATANTE', bold: true },
          { text: '; e', bold: false }
        ]
      },
      {
        type: 'paragraph',
        parts: [
          { text: '2. ', bold: false },
          { text: 'NAUE CONSULTORIA LTDA.', bold: true },
          { text: ', sociedade empres√°ria limitada, inscrita no CNPJ sob o n. 46.259.049/0001-64, com sede a Avenida Dep. Jamel Cec√≠lio e Rua 14 e Rua 14-A, quadra c-9, lote 02/05-15, Ed. Flamboyant Park Business, sala 409, Jardim Goi√°s, Goi√¢nia-GO, cujo endere√ßo eletr√¥nico √© mariana@naueconsultoria.com.br, neste ato representado por sua s√≥cia administradora Francisca Mariana Ferreira de Sousa Naue Lopes, na forma de seu Contrato Social, doravante designada simplesmente como ', bold: false },
          { text: 'CONTRATADA', bold: true },
          { text: '.', bold: false }
        ]
      },
      {
        type: 'paragraph',
        text: 'A CONTRATANTE e a CONTRATADA ser√£o conjuntamente designados como "PARTES" e individualmente como "PARTE".'
      },
      {
        type: 'paragraph',
        text: 'ASSIM, as Partes resolvem, de comum acordo, celebrar o presente Contrato, de acordo com as condi√ß√µes abaixo descritas:'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA PRIMEIRA ‚Äì OBJETO'
      },
      {
        type: 'paragraph',
        text: '1.1. O presente contrato tem por objeto a presta√ß√£o de servi√ßos de consultoria corporativa individual e mentoria executiva, incluindo avalia√ß√µes psicol√≥gicas, testes comportamentais e desenvolvimento profissional.'
      },
      {
        type: 'paragraph',
        text: '1.2. Os servi√ßos ser√£o prestados sem exclusividade pela CONTRATADA, de forma individualizada e personalizada conforme as necessidades espec√≠ficas do CONTRATANTE.'
      },
      {
        type: 'paragraph',
        text: '1.3. Inexistir√° qualquer v√≠nculo empregat√≠cio entre a CONTRATADA e o CONTRATANTE, sendo esta uma rela√ß√£o puramente comercial de presta√ß√£o de servi√ßos.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA SEGUNDA ‚Äì DO ESCOPO DA PRESTA√á√ÉO DE SERVI√áOS'
      },
      {
        type: 'paragraph',
        text: `2.1. O escopo de entregas previstas neste contrato de mentoria e consultoria individual inclui: ${services}`
      },
      {
        type: 'paragraph',
        text: '2.2. As sess√µes de mentoria ser√£o realizadas conforme cronograma acordado entre as partes, podendo ser presenciais ou remotas, conforme disponibilidade e conveni√™ncia m√∫tua.'
      },
      {
        type: 'paragraph',
        text: '2.3. A CONTRATADA fornecer√° relat√≥rios e materiais de apoio ao desenvolvimento profissional do CONTRATANTE, incluindo ferramentas de autoavalia√ß√£o e planos de desenvolvimento individual.'
      },
      {
        type: 'paragraph',
        text: '2.4. Ser√£o aplicados testes psicol√≥gicos e comportamentais espec√≠ficos, com emiss√£o de laudos t√©cnicos quando necess√°rio.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA TERCEIRA ‚Äì DOS HONOR√ÅRIOS E FORMA DE PAGAMENTO'
      },
      {
        type: 'paragraph',
        text: `3.1. Pelo efetivo desempenho das atividades dispostas neste contrato, a CONTRATADA receber√° o valor total de ${totalValue}.`
      },
      {
        type: 'paragraph',
        text: '3.2. O pagamento ser√° efetuado mediante transfer√™ncia banc√°ria ou PIX, conforme dados banc√°rios fornecidos pela CONTRATADA.'
      },
      {
        type: 'paragraph',
        text: '3.3. Em caso de atraso no pagamento, incidir√£o juros de mora de 1% ao m√™s sobre o valor em atraso.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA QUARTA ‚Äì DA VIG√äNCIA'
      },
      {
        type: 'paragraph',
        text: `4.1. O presente contrato vigorar√° de ${startDate} at√© ${endDate}, podendo ser prorrogado mediante acordo entre as partes.`
      },
      {
        type: 'paragraph',
        text: `4.2. N√∫mero do contrato: ${contractNumber}`
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA QUINTA ‚Äì DA CONFIDENCIALIDADE'
      },
      {
        type: 'paragraph',
        text: '5.1. As partes comprometem-se a manter absoluto sigilo sobre todas as informa√ß√µes pessoais e profissionais compartilhadas durante as sess√µes de mentoria e consultoria.'
      },
      {
        type: 'paragraph',
        text: '5.2. A CONTRATADA obriga-se a manter confidencialidade sobre os resultados dos testes aplicados e avalia√ß√µes realizadas, utilizando-os exclusivamente para os fins deste contrato.'
      },
      {
        type: 'paragraph',
        text: '5.3. A obriga√ß√£o de confidencialidade permanecer√° v√°lida mesmo ap√≥s o t√©rmino do contrato.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA SEXTA ‚Äì DA RESCIS√ÉO'
      },
      {
        type: 'paragraph',
        text: '6.1. O presente contrato poder√° ser rescindido por qualquer das partes, mediante aviso pr√©vio de 15 (quinze) dias.'
      },
      {
        type: 'paragraph',
        text: '6.2. Em caso de inadimplemento de qualquer das partes, o contrato poder√° ser rescindido imediatamente.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA S√âTIMA ‚Äì DO FORO'
      },
      {
        type: 'paragraph',
        text: '7.1. As PARTES elegem irrevogavelmente o Foro da Cidade de Goi√¢nia, Estado de Goi√°s, para dirimir quaisquer d√∫vidas oriundas do presente Contrato, com ren√∫ncia a qualquer outro, por mais privilegiado que seja.'
      },
      {
        type: 'paragraph',
        text: 'E, POR ESTAREM ASSIM JUSTAS E CONTRATADAS, as PARTES assinam o presente Contrato em via √∫nica, em formato digital.'
      },
      {
        type: 'paragraph',
        text: `Goi√¢nia-GO, ${this.getCurrentDate()}`
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'signature',
        text: '___________________________________________________'
      },
      {
        type: 'signature',
        text: 'NAUE CONSULTORIA LTDA.',
        bold: true
      },
      {
        type: 'signature',
        text: 'CNPJ: 46.259.049/0001-64'
      },
      {
        type: 'signature',
        text: 'Francisca Mariana Ferreira de Sousa Naue Lopes'
      },
      {
        type: 'signature',
        text: 'S√≥cia Administradora'
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'signature',
        text: '___________________________________________________'
      },
      {
        type: 'signature',
        text: clientName.toUpperCase(),
        bold: true
      },
      {
        type: 'signature',
        text: `CPF: ${clientDocument}`
      },
      {
        type: 'signature',
        text: 'CONTRATANTE',
        bold: true
      }
    ];
  }

  private getRecrutamentoContent(clientName: string, clientDocument: string, contractNumber: string, totalValue: string, startDate: string, endDate: string, services: string): any[] {
    return [
      {
        type: 'title',
        text: 'CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS DE RECRUTAMENTO E SELE√á√ÉO (R&S)'
      },
      {
        type: 'paragraph',
        text: `Pelo presente contrato particular de presta√ß√£o de servi√ßos de Recrutamento e Sele√ß√£o ("Contrato"), as partes:`
      },
      {
        type: 'paragraph',
        parts: [
          { text: '1. ', bold: false },
          { text: clientName.toUpperCase(), bold: true },
          { text: `, ${this.getClientType(clientDocument)}, inscrita no ${this.getDocumentType(clientDocument)} sob o n¬∫ ${clientDocument}, doravante designada simplesmente como `, bold: false },
          { text: 'CONTRATANTE', bold: true },
          { text: '; e', bold: false }
        ]
      },
      {
        type: 'paragraph',
        parts: [
          { text: '2. ', bold: false },
          { text: 'NAUE CONSULTORIA LTDA.', bold: true },
          { text: ', sociedade empres√°ria limitada, inscrita no CNPJ sob o n. 46.259.049/0001-64, com sede a Avenida Dep. Jamel Cec√≠lio e Rua 14 e Rua 14-A, quadra c-9, lote 02/05-15, Ed. Flamboyant Park Business, sala 409, setor Jardim Goi√°s, Goi√¢nia-GO, cujo endere√ßo eletr√¥nico √© mariana@naueconsultoria.com.br, neste ato representado por sua s√≥cia administradora Francisca Mariana Ferreira de Souza Naue Lopes, na forma de seu Contrato Social, doravante designada simplesmente como ', bold: false },
          { text: 'CONTRATADA', bold: true },
          { text: '.', bold: false }
        ]
      },
      {
        type: 'paragraph',
        text: 'A CONTRATANTE e a CONTRATADA ser√£o conjuntamente designados como "PARTES" e individualmente como "PARTE".'
      },
      {
        type: 'paragraph',
        text: 'ASSIM, as Partes resolvem, de comum acordo, celebrar o presente Contrato, de acordo com as condi√ß√µes abaixo descritas:'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA PRIMEIRA ‚Äì OBJETO'
      },
      {
        type: 'paragraph',
        text: '1.1. O presente contrato tem por objeto a presta√ß√£o de servi√ßos especializados de recrutamento e sele√ß√£o de pessoal, incluindo todo o processo seletivo desde o levantamento de necessidades at√© a apresenta√ß√£o dos candidatos finais.'
      },
      {
        type: 'paragraph',
        text: '1.2. Os servi√ßos ser√£o prestados sem exclusividade pela CONTRATADA, seguindo metodologia pr√≥pria e melhores pr√°ticas do mercado de recursos humanos.'
      },
      {
        type: 'paragraph',
        text: '1.3. Inexistir√° qualquer v√≠nculo empregat√≠cio entre a CONTRATADA e a CONTRATANTE, sendo esta uma rela√ß√£o puramente comercial de presta√ß√£o de servi√ßos.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA SEGUNDA ‚Äì DO ESCOPO DA PRESTA√á√ÉO DE SERVI√áOS'
      },
      {
        type: 'paragraph',
        text: '2.1. O escopo de entregas previstas neste contrato inclui as seguintes etapas:'
      },
      {
        type: 'paragraph',
        text: '**1¬™ Etapa - Levantamento de Necessidades:**'
      },
      {
        type: 'paragraph',
        text: '- Conhecimento do neg√≥cio, da empresa e suas verdadeiras necessidades;'
      },
      {
        type: 'paragraph',
        text: '- Levantamento detalhado do perfil do cargo junto ao cliente;'
      },
      {
        type: 'paragraph',
        text: '- Defini√ß√£o de compet√™ncias t√©cnicas e comportamentais desejadas;'
      },
      {
        type: 'paragraph',
        text: '- An√°lise do ambiente organizacional e cultura empresarial.'
      },
      {
        type: 'paragraph',
        text: '**2¬™ Etapa - Divulga√ß√£o e Capta√ß√£o de Curr√≠culos:**'
      },
      {
        type: 'paragraph',
        text: '- Realiza√ß√£o de an√∫ncios da vaga nas redes sociais e canais de divulga√ß√£o;'
      },
      {
        type: 'paragraph',
        text: '- Utiliza√ß√£o de banco de dados pr√≥prio de candidatos;'
      },
      {
        type: 'paragraph',
        text: '- Headhunting direcionado quando necess√°rio;'
      },
      {
        type: 'paragraph',
        text: '- Divulga√ß√£o em plataformas especializadas de recrutamento.'
      },
      {
        type: 'paragraph',
        text: '**3¬™ Etapa - Recrutamento:**'
      },
      {
        type: 'paragraph',
        text: '- Realiza√ß√£o de triagem dos curr√≠culos de acordo com as exig√™ncias da empresa;'
      },
      {
        type: 'paragraph',
        text: '- Entrevista de sele√ß√£o elaborada e planejada;'
      },
      {
        type: 'paragraph',
        text: '- An√°lise preliminar de adequa√ß√£o ao perfil;'
      },
      {
        type: 'paragraph',
        text: '- Verifica√ß√£o de refer√™ncias profissionais.'
      },
      {
        type: 'paragraph',
        text: '**4¬™ Etapa - Sele√ß√£o:**'
      },
      {
        type: 'paragraph',
        text: '- Aplica√ß√£o de testes situacionais, conhecimentos espec√≠ficos ou t√©cnicos;'
      },
      {
        type: 'paragraph',
        text: '- Avalia√ß√£o Psicol√≥gica com confec√ß√£o de Laudo t√©cnico;'
      },
      {
        type: 'paragraph',
        text: '- Entrevista t√©cnica com o supervisor imediato;'
      },
      {
        type: 'paragraph',
        text: '- Apresenta√ß√£o de relat√≥rio final com recomenda√ß√µes.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA TERCEIRA ‚Äì DOS HONOR√ÅRIOS E FORMA DE PAGAMENTO'
      },
      {
        type: 'paragraph',
        text: `3.1. Pelo efetivo desempenho das atividades dispostas neste contrato, a CONTRATADA receber√° o valor total de ${totalValue}.`
      },
      {
        type: 'paragraph',
        text: '3.2. O pagamento ser√° efetuado conforme cronograma acordado entre as partes, mediante apresenta√ß√£o de nota fiscal de servi√ßos.'
      },
      {
        type: 'paragraph',
        text: '3.3. Em caso de atraso no pagamento, incidir√£o juros de mora de 1% ao m√™s e multa de 2% sobre o valor em atraso.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA QUARTA ‚Äì DA VIG√äNCIA E PRAZO DE EXECU√á√ÉO'
      },
      {
        type: 'paragraph',
        text: `4.1. O presente contrato vigorar√° de ${startDate} at√© ${endDate}.`
      },
      {
        type: 'paragraph',
        text: '4.2. O prazo para conclus√£o do processo seletivo ser√° de at√© 45 (quarenta e cinco) dias corridos, contados a partir da assinatura deste contrato, podendo ser prorrogado mediante acordo entre as partes.'
      },
      {
        type: 'paragraph',
        text: `4.3. N√∫mero do contrato: ${contractNumber}`
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA QUINTA ‚Äì DAS OBRIGA√á√ïES DAS PARTES'
      },
      {
        type: 'paragraph',
        text: '5.1. Obriga√ß√µes da CONTRATADA:'
      },
      {
        type: 'paragraph',
        text: 'a) Executar o processo seletivo com qualidade e dentro dos prazos estabelecidos;'
      },
      {
        type: 'paragraph',
        text: 'b) Manter sigilo absoluto sobre informa√ß√µes da empresa e candidatos;'
      },
      {
        type: 'paragraph',
        text: 'c) Apresentar no m√≠nimo 3 (tr√™s) candidatos finalistas;'
      },
      {
        type: 'paragraph',
        text: 'd) Fornecer relat√≥rios detalhados sobre cada candidato.'
      },
      {
        type: 'paragraph',
        text: '5.2. Obriga√ß√µes da CONTRATANTE:'
      },
      {
        type: 'paragraph',
        text: 'a) Efetuar os pagamentos nos prazos acordados;'
      },
      {
        type: 'paragraph',
        text: 'b) Fornecer informa√ß√µes completas sobre o cargo e perfil desejado;'
      },
      {
        type: 'paragraph',
        text: 'c) Disponibilizar pessoa respons√°vel para acompanhamento do processo;'
      },
      {
        type: 'paragraph',
        text: 'd) Dar retorno sobre os candidatos apresentados em at√© 5 dias √∫teis.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA SEXTA ‚Äì DA CONFIDENCIALIDADE'
      },
      {
        type: 'paragraph',
        text: '6.1. As partes comprometem-se a manter sigilo sobre todas as informa√ß√µes trocadas durante o processo seletivo.'
      },
      {
        type: 'paragraph',
        text: '6.2. A CONTRATADA obriga-se a manter confidencialidade sobre os dados dos candidatos e resultados das avalia√ß√µes.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA S√âTIMA ‚Äì DA GARANTIA'
      },
      {
        type: 'paragraph',
        text: '7.1. A CONTRATADA oferece garantia de 90 (noventa) dias sobre o profissional contratado, comprometendo-se a realizar novo processo seletivo sem custos adicionais caso o candidato contratado seja desligado por inadequa√ß√£o ao cargo neste per√≠odo.'
      },
      {
        type: 'heading',
        text: 'CL√ÅUSULA OITAVA ‚Äì DO FORO'
      },
      {
        type: 'paragraph',
        text: '8.1. As PARTES elegem irrevogavelmente o Foro da Cidade de Goi√¢nia, Estado de Goi√°s, para dirimir quaisquer d√∫vidas oriundas do presente Contrato, com ren√∫ncia a qualquer outro, por mais privilegiado que seja.'
      },
      {
        type: 'paragraph',
        text: 'E, POR ESTAREM ASSIM JUSTAS E CONTRATADAS, as PARTES assinam o presente Contrato em via √∫nica, em formato digital.'
      },
      {
        type: 'paragraph',
        text: `Goi√¢nia-GO, ${this.getCurrentDate()}`
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'signature',
        text: '___________________________________________________'
      },
      {
        type: 'signature',
        text: 'NAUE CONSULTORIA LTDA.',
        bold: true
      },
      {
        type: 'signature',
        text: 'CNPJ: 46.259.049/0001-64'
      },
      {
        type: 'signature',
        text: 'Francisca Mariana Ferreira de Souza Naue Lopes'
      },
      {
        type: 'signature',
        text: 'S√≥cia Administradora'
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'spacing',
        text: ''
      },
      {
        type: 'signature',
        text: '___________________________________________________'
      },
      {
        type: 'signature',
        text: clientName.toUpperCase(),
        bold: true
      },
      {
        type: 'signature',
        text: `${this.getDocumentType(clientDocument)}: ${clientDocument}`
      },
      {
        type: 'signature',
        text: 'CONTRATANTE',
        bold: true
      }
    ];
  }

  private formatCurrency(value: number): string {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(value);
  }

  private formatDate(dateString: string): string {
    if (!dateString) return '[DATA]';
    
    const date = new Date(dateString);
    return date.toLocaleDateString('pt-BR');
  }

  private generateFileName(contract: any, templateId: string, extension: string): string {
    const clientName = this.getClientName(contract.client);
    const sanitizedClientName = clientName.replace(/[^a-zA-Z0-9]/g, '_');
    const contractNumber = contract.contract_number || 'Contrato';
    const templateName = this.getTemplateName(templateId);
    
    return `${contractNumber}_${sanitizedClientName}_${templateName}.${extension}`;
  }

  private getTemplateName(templateId: string): string {
    switch (templateId) {
      case 'consultoria-pj': return 'Consultoria_PJ';
      case 'consultoria-pf': return 'Consultoria_PF';
      case 'recrutamento': return 'Recrutamento';
      default: return 'Contrato';
    }
  }

  private getClientType(document: string): string {
    // Detecta se √© CPF (11 d√≠gitos) ou CNPJ (14 d√≠gitos)
    const numbersOnly = document.replace(/\D/g, '');
    return numbersOnly.length === 11 ? 'pessoa f√≠sica' : 'sociedade empres√°ria limitada';
  }

  private getDocumentType(document: string): string {
    const numbersOnly = document.replace(/\D/g, '');
    return numbersOnly.length === 11 ? 'CPF' : 'CNPJ';
  }

  private getCurrentDate(): string {
    const now = new Date();
    return now.toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: 'long',
      year: 'numeric'
    });
  }

  private getClientDocument(client: any): string {
    if (!client) return '000.000.000-00';
    
    // Para PF (Pessoa F√≠sica)
    if (client.clients_pf && client.clients_pf.length > 0) {
      return client.clients_pf[0].cpf || '000.000.000-00';
    }
    
    // Para PJ (Pessoa Jur√≠dica)
    if (client.clients_pj && client.clients_pj.length > 0) {
      return client.clients_pj[0].cnpj || '00.000.000/0000-00';
    }
    
    // Campos diretos do cliente
    if (client.cpf) return client.cpf;
    if (client.cnpj) return client.cnpj;
    if (client.document) return client.document;
    
    // Fallback padr√£o
    return '000.000.000-00';
  }

  private getClientName(client: any): string {
    if (!client) return 'Cliente n√£o informado';
    
    // Se j√° tem nome processado
    if (client.name) return client.name;
    
    // Para PF (Pessoa F√≠sica)
    if (client.clients_pf && client.clients_pf.length > 0) {
      return client.clients_pf[0].full_name || 'Nome n√£o informado';
    }
    
    // Para PJ (Pessoa Jur√≠dica)
    if (client.clients_pj && client.clients_pj.length > 0) {
      return client.clients_pj[0].company_name || client.clients_pj[0].trade_name || 'Empresa n√£o informada';
    }
    
    return 'Cliente n√£o identificado';
  }
}